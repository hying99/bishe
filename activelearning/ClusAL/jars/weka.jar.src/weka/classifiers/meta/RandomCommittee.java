package weka.classifiers.meta;

import java.util.Random;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.RandomizableIteratedSingleClassifierEnhancer;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Randomizable;
import weka.core.UnsupportedAttributeTypeException;
import weka.core.Utils;
import weka.core.WeightedInstancesHandler;

public class RandomCommittee extends RandomizableIteratedSingleClassifierEnhancer implements WeightedInstancesHandler {
  protected String defaultClassifierString() {
    return "weka.classifiers.trees.RandomTree";
  }
  
  public String globalInfo() {
    return "Class for building an ensemble of randomizable base classifiers. Each base classifiers is built using a different random number seed (but based one the same data). The final prediction is a straight average of the predictions generated by the individual base classifiers.";
  }
  
  public void buildClassifier(Instances paramInstances) throws Exception {
    if (paramInstances.checkForStringAttributes())
      throw new UnsupportedAttributeTypeException("Cannot handle string attributes!"); 
    if (!(this.m_Classifier instanceof Randomizable))
      throw new IllegalArgumentException("Base learner must implement Randomizable!"); 
    this.m_Classifiers = Classifier.makeCopies(this.m_Classifier, this.m_NumIterations);
    Random random = paramInstances.getRandomNumberGenerator(this.m_Seed);
    for (byte b = 0; b < this.m_Classifiers.length; b++) {
      ((Randomizable)this.m_Classifiers[b]).setSeed(random.nextInt());
      this.m_Classifiers[b].buildClassifier(paramInstances);
    } 
  }
  
  public double[] distributionForInstance(Instance paramInstance) throws Exception {
    double[] arrayOfDouble = new double[paramInstance.numClasses()];
    for (byte b = 0; b < this.m_NumIterations; b++) {
      if (paramInstance.classAttribute().isNumeric() == true) {
        arrayOfDouble[0] = arrayOfDouble[0] + this.m_Classifiers[b].classifyInstance(paramInstance);
      } else {
        double[] arrayOfDouble1 = this.m_Classifiers[b].distributionForInstance(paramInstance);
        for (byte b1 = 0; b1 < arrayOfDouble1.length; b1++)
          arrayOfDouble[b1] = arrayOfDouble[b1] + arrayOfDouble1[b1]; 
      } 
    } 
    if (paramInstance.classAttribute().isNumeric() == true) {
      arrayOfDouble[0] = arrayOfDouble[0] / this.m_NumIterations;
      return arrayOfDouble;
    } 
    if (Utils.eq(Utils.sum(arrayOfDouble), 0.0D))
      return arrayOfDouble; 
    Utils.normalize(arrayOfDouble);
    return arrayOfDouble;
  }
  
  public String toString() {
    if (this.m_Classifiers == null)
      return "RandomCommittee: No model built yet."; 
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("All the base classifiers: \n\n");
    for (byte b = 0; b < this.m_Classifiers.length; b++)
      stringBuffer.append(this.m_Classifiers[b].toString() + "\n\n"); 
    return stringBuffer.toString();
  }
  
  public static void main(String[] paramArrayOfString) {
    try {
      System.out.println(Evaluation.evaluateModel((Classifier)new RandomCommittee(), paramArrayOfString));
    } catch (Exception exception) {
      System.err.println(exception.getMessage());
    } 
  }
}


/* Location:              C:\Users\1231\Desktop\dataprocessing\activelearning\Clus-AL\Clus-AL\ClusAL\!\jars\weka.jar!\weka\classifiers\meta\RandomCommittee.class
 * Java compiler version: 2 (46.0)
 * JD-Core Version:       1.1.3
 */