View(edgelist)
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% except.root.labels2))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist,"/")
}
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],"/")
}
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[i],"/")
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[i],"/")
}
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% except.root.labels2))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgelist[[1]]
paste(edgelist[[1]],sep = "/")
paste(edgelist[[1]],collapse  = "/")
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[i],collapse = "/")
}
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(Rweka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并筛选存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% except.root.labels2))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- c("root/GO0008150",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####拼接属性和标签#####
trainlabels <- Findlabels(train.select.table2)
validlabels <- Findlabels(valid.select.table2)
testlabels <- Findlabels(test.select.table2)
train.arff <- cbind(train.select.data2,trainlabels)
valid.arff <- cbind(valid.select.data2,validlabels)
test.arff <- cbind(test.select.data2,testlabels)
setwd("C:\Users\1231\Desktop\dataprocessing\arff")
#####形成arff文件#####
write.arff(train.arff,"train.arff")
write.arff(valid.arff,"valid.arff")
write.arff(test.arff,"test.arff")
#####把最后一个attribute改成class#####
Adjustattribute("train.arff","newtrain.arff")
Adjustattribute("valid.arff","newvalid.arff")
Adjustattribute("test.arff","newtest.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(Rweka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并筛选存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% except.root.labels2))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- c("root/GO0008150",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####拼接属性和标签#####
trainlabels <- Findlabels(train.select.table2)
validlabels <- Findlabels(valid.select.table2)
testlabels <- Findlabels(test.select.table2)
train.arff <- cbind(train.select.data2,trainlabels)
valid.arff <- cbind(valid.select.data2,validlabels)
test.arff <- cbind(test.select.data2,testlabels)
setwd("C:\\Users\\1231\\Desktop\\dataprocessing\\arff")
#####形成arff文件#####
write.arff(train.arff,"train.arff")
write.arff(valid.arff,"valid.arff")
write.arff(test.arff,"test.arff")
#####把最后一个attribute改成class#####
Adjustattribute("train.arff","newtrain.arff")
Adjustattribute("valid.arff","newvalid.arff")
Adjustattribute("test.arff","newtest.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
grep("GO0032501",except.root.labels2)
View(listexrootClassesLevels)
grep("GO0032501",originaledgedata)
originaledgedata(grep("GO0032501",originaledgedata))
originaledgedata[grep("GO0032501",originaledgedata)]
grep("GO0044707",except.root.labels2)
grep("GO0008150",except.root.labels2)
grep("GO0008150",originaledgedata)
View(datasetFinal)
View(dataFrameClasses)
grep("GO008150",allClasses)
grep("GO0008150",allClasses)
grep("GO0008150",allClasses)
a <- originaledgedata[grep("GO0008150",originaledgedata)]
a %in% except.root.labels2
except.root.labels2 %in% a
a <- originaledgedata[grep("root",originaledgedata)]
a
a <- originaledgedata[grep("GO0008150",originaledgedata)]
a
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(Rweka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并筛选存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- c("root/GO0008150",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####拼接属性和标签#####
trainlabels <- Findlabels(train.select.table2)
validlabels <- Findlabels(valid.select.table2)
testlabels <- Findlabels(test.select.table2)
train.arff <- cbind(train.select.data2,trainlabels)
valid.arff <- cbind(valid.select.data2,validlabels)
test.arff <- cbind(test.select.data2,testlabels)
setwd("C:\\Users\\1231\\Desktop\\dataprocessing\\arff")
#####形成arff文件#####
write.arff(train.arff,"train.arff")
write.arff(valid.arff,"valid.arff")
write.arff(test.arff,"test.arff")
#####把最后一个attribute改成class#####
Adjustattribute("train.arff","newtrain.arff")
Adjustattribute("valid.arff","newvalid.arff")
Adjustattribute("test.arff","newtest.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(Rweka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并筛选存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgelist <- gsub("GO0008150","root",edgelist)
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- gsub("GO0008150","root",edgedata)
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(Rweka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并筛选存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- gsub("GO0008150","root",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####拼接属性和标签#####
trainlabels <- Findlabels(train.select.table2)
validlabels <- Findlabels(valid.select.table2)
testlabels <- Findlabels(test.select.table2)
train.arff <- cbind(train.select.data2,trainlabels)
valid.arff <- cbind(valid.select.data2,validlabels)
test.arff <- cbind(test.select.data2,testlabels)
setwd("C:\\Users\\1231\\Desktop\\dataprocessing\\arff")
#####形成arff文件#####
write.arff(train.arff,"train.arff")
write.arff(valid.arff,"valid.arff")
write.arff(test.arff,"test.arff")
#####把最后一个attribute改成class#####
Adjustattribute("train.arff","newtrain.arff")
Adjustattribute("valid.arff","newvalid.arff")
Adjustattribute("test.arff","newtest.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
#用于将CLUS生成的test.pred.arff文件读入并计算其结果的评价指标
#20170421
#数据集名称由file.prefix指定
data.path="C:\\Users\\1231\\Desktop\\dataprocessing\\"
setwd(data.path)
#设置arff文件的存储文件夹名
fold.name="arff\\"
source("headfile.R")
file.prefix = "new"
#调用ReadPredictArff函数，得到样本的真实标签和预测的概率
labels.result=ReadPredictArff(data.path,fold.name,file.prefix,except.root.labels2,part.num=3,name.row.num=2)
#样本的真实标签
true.labels=labels.result[[1]]
#使用original model 预测的概率
original.scores=labels.result[[2]]
#使用pruned model 预测的概率
pruned.scores=labels.result[[3]]
#用于存放original model预测概率转化后的标签
o.predict.labels=matrix(0,nrow(original.scores),ncol(original.scores))
colnames(o.predict.labels)=colnames(original.scores)
#将original model预测概率转化为标签
for(i in 1:nrow(original.scores))
{
for(j in 1:ncol(original.scores))
{
if(original.scores[i,j]>=0.5)
{
o.predict.labels[i,j]=1
}
}
}
#violate.detect.result=ViolateDetectlabel(go.for.level,go.leaf.nodes,nodes.to.index,nodes.to.children,o.predict.labels)
#进行结果评价
o.measure.result=MHevaluate(o.predict.labels,true.labels)
o.prauc_result=PRAUCCalculate(original.scores,true.labels)
p.predict.labels=matrix(0,nrow(pruned.scores),ncol(pruned.scores))
colnames(p.predict.labels)=colnames(pruned.scores)
for(i in 1:nrow(pruned.scores))
{
for(j in 1:ncol(pruned.scores))
{
if(pruned.scores[i,j]>=0.5)
{
p.predict.labels[i,j]=1
}
}
}
p.measure.result=MHevaluate(p.predict.labels,true.labels)
p.prauc_result=PRAUCCalculate(pruned.scores,true.labels)
#####下方用于验证PRAUC正确性，并无实际应用
label.num=ncol(pruned.scores)
each.class.auc=rep(0,label.num)
each.class.freq=rep(0,label.num)
each.class.weight=rep(0,label.num)
for(i in 1:label.num)
{
single.predict.scores=pruned.scores[,i]
single.target.label=true.labels[,i]
single.pr.result=precision.at.all.recall.levels(single.predict.scores, single.target.label)
each.class.auc[i]=AUPRC(list(single.pr.result), comp.precision=TRUE)
each.class.freq[i]=sum(single.target.label)
}
average.auprc=sum(each.class.auc)/label.num
average.auprc.w=0
for(i in 1:label.num)
{
each.class.weight[i]=each.class.freq[i]/sum(each.class.freq)
average.auprc.w=average.auprc.w+each.class.auc[i]*each.class.weight[i]
}
original.data <- scan("new.test.pred", what = list(""),sep = "\n")
#将数据转存为list格式，以便将数据按行分开
each.row.data=list()
for(i in 1:length(original.data[[1]]))
{
each.row.data[i]=strsplit(original.data[[1]][i],split = " ")
}
#查找从哪行开始 以后均为预测结果数据
head.row.num=which(each.row.data=="@DATA")
#求得测试样本的数量
test.sample.num=length(original.data[[1]])-head.row.num
#获取读入的预测结果文件的列数
inter.data=strsplit(each.row.data[[head.row.num+1]],split = ",")
data.col.num=length(inter.data[[1]])
#将预测结果数据转化为矩阵形式存储
all.labels=matrix(0,nrow = test.sample.num,ncol = data.col.num)
for(i in 1:test.sample.num)
{
inter.data=strsplit(each.row.data[[head.row.num+i]],split = ",")
all.labels[i,]=inter.data[[1]]
}
#求取标签集应含有多少标签
label.num=(data.col.num-part.num)/(part.num)
label.names=rep(0,time=label.num)
for(i in 1:label.num)
{
label.names[i]=gsub("class-a-GO","GO:",each.row.data[[(name.row.num+i)]][[2]])
}
setwd("C:\\Users\\1231\\Desktop\\dataprocessing\\arff")
original.data <- scan("new.test.pred", what = list(""),sep = "\n")
#将数据转存为list格式，以便将数据按行分开
each.row.data=list()
for(i in 1:length(original.data[[1]]))
{
each.row.data[i]=strsplit(original.data[[1]][i],split = " ")
}
#查找从哪行开始 以后均为预测结果数据
head.row.num=which(each.row.data=="@DATA")
#求得测试样本的数量
test.sample.num=length(original.data[[1]])-head.row.num
#获取读入的预测结果文件的列数
inter.data=strsplit(each.row.data[[head.row.num+1]],split = ",")
data.col.num=length(inter.data[[1]])
#将预测结果数据转化为矩阵形式存储
all.labels=matrix(0,nrow = test.sample.num,ncol = data.col.num)
for(i in 1:test.sample.num)
{
inter.data=strsplit(each.row.data[[head.row.num+i]],split = ",")
all.labels[i,]=inter.data[[1]]
}
#求取标签集应含有多少标签
label.num=(data.col.num-part.num)/(part.num)
label.names=rep(0,time=label.num)
for(i in 1:label.num)
{
label.names[i]=gsub("class-a-GO","GO:",each.row.data[[(name.row.num+i)]][[2]])
}
setwd("C:\\Users\\1231\\Desktop\\dataprocessing\\arff")
original.data <- scan("new.test.pred.arff", what = list(""),sep = "\n")
#将数据转存为list格式，以便将数据按行分开
each.row.data=list()
for(i in 1:length(original.data[[1]]))
{
each.row.data[i]=strsplit(original.data[[1]][i],split = " ")
}
#查找从哪行开始 以后均为预测结果数据
head.row.num=which(each.row.data=="@DATA")
#求得测试样本的数量
test.sample.num=length(original.data[[1]])-head.row.num
#获取读入的预测结果文件的列数
inter.data=strsplit(each.row.data[[head.row.num+1]],split = ",")
data.col.num=length(inter.data[[1]])
#将预测结果数据转化为矩阵形式存储
all.labels=matrix(0,nrow = test.sample.num,ncol = data.col.num)
for(i in 1:test.sample.num)
{
inter.data=strsplit(each.row.data[[head.row.num+i]],split = ",")
all.labels[i,]=inter.data[[1]]
}
#求取标签集应含有多少标签
label.num=(data.col.num-part.num)/(part.num)
label.names=rep(0,time=label.num)
for(i in 1:label.num)
{
label.names[i]=gsub("class-a-GO","GO:",each.row.data[[(name.row.num+i)]][[2]])
}
setwd("C:\\Users\\1231\\Desktop\\dataprocessing\\arff")
original.data <- scan("new.test.pred.arff", what = list(""),sep = "\n")
part.num = 3
label.num =2
#将数据转存为list格式，以便将数据按行分开
each.row.data=list()
for(i in 1:length(original.data[[1]]))
{
each.row.data[i]=strsplit(original.data[[1]][i],split = " ")
}
#查找从哪行开始 以后均为预测结果数据
head.row.num=which(each.row.data=="@DATA")
#求得测试样本的数量
test.sample.num=length(original.data[[1]])-head.row.num
#获取读入的预测结果文件的列数
inter.data=strsplit(each.row.data[[head.row.num+1]],split = ",")
data.col.num=length(inter.data[[1]])
#将预测结果数据转化为矩阵形式存储
all.labels=matrix(0,nrow = test.sample.num,ncol = data.col.num)
for(i in 1:test.sample.num)
{
inter.data=strsplit(each.row.data[[head.row.num+i]],split = ",")
all.labels[i,]=inter.data[[1]]
}
#求取标签集应含有多少标签
label.num=(data.col.num-part.num)/(part.num)
label.names=rep(0,time=label.num)
for(i in 1:label.num)
{
label.names[i]=gsub("class-a-GO","GO:",each.row.data[[(name.row.num+i)]][[2]])
}
