#去掉listexrootClassesLevels的第一个元素
listexrootClassesPaths <- vector("list")
#构造eachnodeslevels，一去掉list里的第一个元素（节点自身），二把路径（一长串string“a/b/c/d”拆成有顺序的多个元素”a””b””c””d”
eachnodeslevels <- vector("list",length = length(listexrootClassesPaths))
for (t in 1:length(listexrootClassesLevels)) {
listexrootClassesPaths[[t]] <- listexrootClassesLevels[[t]][-1]
eachnodeslevels[[t]] <- strsplit(listexrootClassesPaths[[t]],"/")
}
eachnodeslevels2 <- eachnodeslevels
levelClasses <- vector("numeric",length(listexrootClassesLevels))
for(j in 1:length(levelClasses)){
numEdges <- vector()
allPaths <- listexrootClassesLevels[[j]][2:length(listexrootClassesLevels[[j]])]
for(k in 1:length(allPaths)){
numEdges <- c(numEdges,length(unlist(strsplit(allPaths[k],"/"))))
}
levelClasses[j] <- max(numEdges)
}
#cat(levelClasses,"\n")
#Number of levels
numLevels <- max(unique(levelClasses))
namesClasses <- vector("list",numLevels)
for(i in 2:numLevels){
regExpClass <- paste("^",i,"$",sep="")
posClassesLevel <- grep(regExpClass,levelClasses)
for(j in 1:length(posClassesLevel)){
namesClasses[[i]] <- c(namesClasses[[i]],listexrootClassesLevels[[posClassesLevel[j]]][1])
}
}
go.for.level2 <- namesClasses
go.for.level2[[1]] <- NULL
#建立索引nodes.to.index2
nodes.to.index2 <- as.list(1:length(except.root.labels2))
names(nodes.to.index2) <- except.root.labels2
#搜索子节点,建立nodes.to.children,nodes.to.parents,
children.nodes2 <- vector("list")
parents.nodes2 <- vector("list")
index2 <- vector("list")
children.index2 <- vector("list")
nextindex2 <- vector("list")
#names(index) <- except.root.labels2
nodes.to.children2 <- vector("list")
nodes.to.parents2 <- vector("list")
nodes.to.ancestors2 <- vector("list")
nodes.to.descendants2 <- vector("list",length = length(except.root.labels2))
#names(index) <- except.root.labels2
go.leaf.nodes2 <- vector()
for (i in 1:length(except.root.labels2))
{
cat(i,"\n")
#搜索class[i]在全部listexrootclassesPaths的位置索引
parentclasses2 <- except.root.labels2[i]
#index2是except.root.labels2[i]在listexrootClassesPaths出现的位置
index2[[parentclasses2]] <- grep(parentclasses2,listexrootClassesPaths)
#class[i]不只出现一次，index2[i]里有多个元素
for (k in 1:length(index2[[i]])) {
#搜索在含某class的listexrootclassesPaths的内部位置
aa <- vector()
for (j in 1:length(eachnodeslevels[[index2[[i]][k]]])) {
#某个节点的paths数量
#cat(j,"\n")
bb <- vector()
if(sum(grepl(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])) != 0)
{
#bb是except.root.labels2[i]在具体某个节点的j个paths里面出现的位置
bb <- grep(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])
#在eachnodeslevels里找子节点父节点
children.nodes2[[parentclasses2]] <- c(children.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb+1])
parents.nodes2[[parentclasses2]] <- c(parents.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb-1])
aa <- c(aa,bb)
}
}
nextindex2[[k]] <- list(aa)
#children.index2[[i]]的数量是节点总共在路径中出现的次数，children.index[[i]]里有几个list对应着index2[[i]]里元素个数，这个节点总共出现几次
#index2[[i]]里是大路径的索引k，索引1对应children.index2[[i]]里的第一个list，list里的元素就是在这个大路径k下的多个小路径，这个class所在的位置，但NA是缺失的
children.index2[[except.root.labels2[i]]] <- c(children.index2[[except.root.labels2[i]]],nextindex2[[k]])
}
children.nodes2[[i]] <- unique(children.nodes2[[i]])
parents.nodes2[[i]] <- unique(parents.nodes2[[i]])
nodes.to.children2[[parentclasses2]] <- grep(paste(children.nodes2[[i]],collapse = "|"),except.root.labels2)
nodes.to.parents2[[parentclasses2]] <- grep(paste(parents.nodes2[[i]],collapse = "|"),except.root.labels2)
children.nodes2[[i]] <- na.omit(children.nodes2[[i]])
#查找叶子节点
if (length(nodes.to.children2[[except.root.labels2[i]]]) == 0)
{
go.leaf.nodes2 <- c(go.leaf.nodes2,names(nodes.to.children2[except.root.labels2[i]]))
}
nodes.to.ancestors2[[except.root.labels2[i]]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
ipos <- paste("^",i,"$",sep="")
nodes.to.ancestors2[[except.root.labels2[i]]] <- nodes.to.ancestors2[[except.root.labels2[i]]][-grep(ipos,nodes.to.ancestors2[[except.root.labels2[i]]])]
#建立nodes.to.descendants2
# nodes.to.descendants2[[except.root.labels2[i]]] <- nodes.to.children2[[except.root.labels2[i]]]
#
# if(length(nodes.to.children2[[except.root.labels2[i]]]) > 0)
# {
# for (m in 1:length(nodes.to.children2[[except.root.labels2[i]]])) {
#   nodes.to.descendants2[[except.root.labels2[i]]] <- c(nodes.to.descendants2[[except.root.labels2[i]]], nodes.to.children2[[except.root.labels2[nodes.to.children2[[except.root.labels2[i]]][m]]]])
# }
# }
# nodes.to.descendants2[[except.root.labels2[i]]] <- unique(nodes.to.descendants2[[except.root.labels2[i]]])
}
#20210131改，遍历子孙节点
names(nodes.to.descendants2) <- except.root.labels2
for (m in 1:length(except.root.labels2)) {
for (n in 1:length(except.root.labels2)) {
if ( m %in% nodes.to.ancestors2[[except.root.labels2[n]]] == TRUE)
nodes.to.descendants2[[except.root.labels2[m]]] <- c(nodes.to.descendants2[[except.root.labels2[m]]],n)
}
if (length(nodes.to.descendants2[[except.root.labels2[m]]]) == 0)
nodes.to.descendants2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.children2[[except.root.labels2[m]]]) == 0)
nodes.to.children2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.ancestors2[[except.root.labels2[m]]]) == 0)
nodes.to.ancestors2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.parents2[[except.root.labels2[m]]]) == 0)
nodes.to.parents2[[except.root.labels2[m]]] <- NA
}
#去掉不属于BP功能的CC.nodes的子孙节点，以及召回率不好的节点的子孙节点20210201
CC.nodes2 <- c("GO0044710", "GO0044763", "GO0044699", "GO0044707", "GO0044767", "GO0007067", "GO0044700", "GO0044702")
CC.nodes.pos2 <- which(except.root.labels2 %in% CC.nodes2)
CC.nodes.pos2 <- c(CC.nodes.pos2,85,87,133,135,136,140,163,189,221,224,225,236,244,246)
CC.nodes2 <- except.root.labels2[CC.nodes.pos2]
removeindex <- CC.nodes.pos2
for (i in 1:length(CC.nodes.pos2)) {
removeindex <- na.omit(unique(c(removeindex,nodes.to.descendants2[[CC.nodes2[i]]])))
}
removelabels <- except.root.labels2[removeindex]
except.root.labels2 <- except.root.labels2[-removeindex]
except.root.table2 <- except.root.table2[,-removeindex]
exrootClassesPaths <- exrootClassesPaths[-removeindex]
listexrootClassesPaths <- listexrootClassesPaths[-removeindex]
listexrootClassesLevels <- listexrootClassesLevels[-removeindex]
setwd("C:/Users/1231/Desktop/dataprocessing")
source("nodescreation.R")
###设置路径
setwd("C:/Users/1231/Desktop/dataprocessing")
source("dataset_select2.R")
source("dataset_divide.R")
###选择训练集 1、2、3、4、5
datasetindex <- 1
datasetresult = DatasetSelect(dataset.index = datasetindex)
select.table <- datasetresult[[1]]
select.data <- datasetresult[[2]]
###拆分训练集train:test=2:1
selecttabletodivide <- DatasetDivide(dataset = select.table)
train.select.table2 <- selecttabletodivide[[1]]
valid.select.table2 <- selecttabletodivide[[2]]
test.select.table2 <- selecttabletodivide[[3]]
selectdatatodivide <- DatasetDivide(dataset=select.data)
train.select.data2 <- selectdatatodivide[[1]]
valid.select.data2 <- selectdatatodivide[[2]]
test.select.data2 <- selectdatatodivide[[3]]
View(train.select.table2)
View(valid.select.table2)
rbind(train.select.table2,valid.select.table2)
round(7.1)
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(RWeka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并通过如果路径a/b中,a,b任意一个是已知节点范围之外的节点就去掉的逻辑筛选掉不存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
#####由于except.root.labels2中无GO0008150（之前说大家都属于它，给删掉了），GO0008150应当是根节点的存在但edgelist里面有root,有GO0008150，把root都改成GO0008150#####
#####故在except.root.labels2加入GO0008150#####
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- gsub("GO0008150","root",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####划分labelled和unlabelled#####
tolabeltable <- rbind(train.select.table2,valid.select.table2)
tolabeldata <- rbind(train.select.data2,valid.select.data2)
numofrow <- nrow(tolabeltable)
numoflabelled <- round(numofrow/10)
labelledtable <- tolabeltable[1:numoflabelled,]
unlabelledtable <- tolabeltable[((numoflabelled+1):numofrow),]
labelleddata <- tolabeldata[1:numoflabelled,]
unlabelleddata <- tolabeldata[((numoflabelled+1):numofrow),]
labelledlabels <- Findlabels(labelledtable)
unlabelledlabels <- Findlabels(unlabelledtable)
testlabels <- Findlabels(test.select.table2)
labelled.arff <- cbind(labelleddata,labelledlabels)
unlabelled.arff <- cbind(unlabelleddata,unlabelledlabels)
test.arff <- cbind(test.select.data2,testlabels)
#####设置存储路径#####
#####要改aa#####
aa <- 1
arff.path <- paste("C:\\Users\\1231\\Desktop\\dataprocessing\\data\\223arff\\arff",aa,sep = "")
setwd(arff.path)
#####形成arff文件#####
write.arff(labelled.arff,"labelled.arff")
write.arff(unlabelled.arff,"unlabelled.arff")
write.arff(test.arff,"test.arff")
#####把最后一个attribute改成class#####
Adjustattribute("train.arff","newtrain.arff")
Adjustattribute("valid.arff","newvalid.arff")
Adjustattribute("test.arff","newtest.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
write.arff(labelled.arff,"labelled.arff")
write.arff(unlabelled.arff,"unlabelled.arff")
write.arff(test.arff,"test.arff")
#####把最后一个attribute改成class#####
Adjustattribute("labelled.arff","labelled.arff")
Adjustattribute("unlabelled.arff","unlabelled.arff")
Adjustattribute("test.arff","test.arff")
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(RWeka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并通过如果路径a/b中,a,b任意一个是已知节点范围之外的节点就去掉的逻辑筛选掉不存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
#####由于except.root.labels2中无GO0008150（之前说大家都属于它，给删掉了），GO0008150应当是根节点的存在但edgelist里面有root,有GO0008150，把root都改成GO0008150#####
#####故在except.root.labels2加入GO0008150#####
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- gsub("GO0008150","root",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####划分labelled和unlabelled#####
tolabeltable <- rbind(train.select.table2,valid.select.table2)
tolabeldata <- rbind(train.select.data2,valid.select.data2)
numofrow <- nrow(tolabeltable)
numoflabelled <- round(numofrow/10)
labelledtable <- tolabeltable[1:numoflabelled,]
unlabelledtable <- tolabeltable[((numoflabelled+1):numofrow),]
labelleddata <- tolabeldata[1:numoflabelled,]
unlabelleddata <- tolabeldata[((numoflabelled+1):numofrow),]
#####拼接属性和标签#####
labelledlabels <- Findlabels(labelledtable)
unlabelledlabels <- Findlabels(unlabelledtable)
testlabels <- Findlabels(test.select.table2)
labelled.arff <- cbind(labelleddata,labelledlabels)
unlabelled.arff <- cbind(unlabelleddata,unlabelledlabels)
test.arff <- cbind(test.select.data2,testlabels)
#####设置存储路径#####
#####要改aa#####
aa <- 1
arff.path <- paste("C:\\Users\\1231\\Desktop\\dataprocessing\\data\\204arff\\arff",aa,sep = "")
setwd(arff.path)
#####形成arff文件#####
write.arff(labelled.arff,"labelled1.arff")
write.arff(unlabelled.arff,"unlabelled1.arff")
write.arff(test.arff,"test1.arff")
#####把最后一个attribute改成class#####
Adjustattribute("labelled1.arff","labelled.arff")
Adjustattribute("unlabelled1.arff","unlabelled.arff")
Adjustattribute("test1.arff","test.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(RWeka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并通过如果路径a/b中,a,b任意一个是已知节点范围之外的节点就去掉的逻辑筛选掉不存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
#####由于except.root.labels2中无GO0008150（之前说大家都属于它，给删掉了），GO0008150应当是根节点的存在但edgelist里面有root,有GO0008150，把root都改成GO0008150#####
#####故在except.root.labels2加入GO0008150#####
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- gsub("GO0008150","root",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####划分labelled和unlabelled#####
tolabeltable <- rbind(train.select.table2,valid.select.table2)
tolabeldata <- rbind(train.select.data2,valid.select.data2)
numofrow <- nrow(tolabeltable)
numoflabelled <- round(numofrow/10)
labelledtable <- tolabeltable[1:numoflabelled,]
unlabelledtable <- tolabeltable[((numoflabelled+1):numofrow),]
labelleddata <- tolabeldata[1:numoflabelled,]
unlabelleddata <- tolabeldata[((numoflabelled+1):numofrow),]
#####拼接属性和标签#####
labelledlabels <- Findlabels(labelledtable)
unlabelledlabels <- Findlabels(unlabelledtable)
testlabels <- Findlabels(test.select.table2)
labelled.arff <- cbind(labelleddata,labelledlabels)
unlabelled.arff <- cbind(unlabelleddata,unlabelledlabels)
test.arff <- cbind(test.select.data2,testlabels)
#####设置存储路径#####
#####要改aa#####
aa <- 1
arff.path <- paste("C:\\Users\\1231\\Desktop\\dataprocessing\\data\\204arff\\arff",aa,sep = "")
setwd(arff.path)
#####形成arff文件#####
write.arff(labelled.arff,"labelled1.arff")
write.arff(unlabelled.arff,"unlabelled1.arff")
write.arff(test.arff,"test1.arff")
#####把最后一个attribute改成class#####
Adjustattribute("labelled1.arff","labelled.arff")
Adjustattribute("unlabelled1.arff","unlabelled.arff")
Adjustattribute("test1.arff","test.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(RWeka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并通过如果路径a/b中,a,b任意一个是已知节点范围之外的节点就去掉的逻辑筛选掉不存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
#####由于except.root.labels2中无GO0008150（之前说大家都属于它，给删掉了），GO0008150应当是根节点的存在但edgelist里面有root,有GO0008150，把root都改成GO0008150#####
#####故在except.root.labels2加入GO0008150#####
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- gsub("GO0008150","root",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####划分labelled和unlabelled#####
tolabeltable <- rbind(train.select.table2,valid.select.table2)
tolabeldata <- rbind(train.select.data2,valid.select.data2)
numofrow <- nrow(tolabeltable)
numoflabelled <- round(numofrow/10)
labelledtable <- tolabeltable[1:numoflabelled,]
unlabelledtable <- tolabeltable[((numoflabelled+1):numofrow),]
labelleddata <- tolabeldata[1:numoflabelled,]
unlabelleddata <- tolabeldata[((numoflabelled+1):numofrow),]
#####拼接属性和标签#####
labelledlabels <- Findlabels(labelledtable)
unlabelledlabels <- Findlabels(unlabelledtable)
testlabels <- Findlabels(test.select.table2)
labelled.arff <- cbind(labelleddata,labelledlabels)
unlabelled.arff <- cbind(unlabelleddata,unlabelledlabels)
test.arff <- cbind(test.select.data2,testlabels)
#####设置存储路径#####
#####要改aa#####
aa <- 1
arff.path <- paste("C:\\Users\\1231\\Desktop\\dataprocessing\\data\\204arff\\arff",aa,sep = "")
setwd(arff.path)
#####形成arff文件#####
write.arff(labelled.arff,"labelled1.arff")
write.arff(unlabelled.arff,"unlabelled1.arff")
write.arff(test.arff,"test1.arff")
#####把最后一个attribute改成class#####
Adjustattribute("labelled1.arff","labelled.arff")
Adjustattribute("unlabelled1.arff","unlabelled.arff")
Adjustattribute("test1.arff","labeltest.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
grep("GO0000122",except.root.labels2)
View(edgelist)
grep("GO0010605",except.root.labels2)
View(nodes.to.descendants2)
#####建立可被clus读取的arff文件#####
#####其格式为属性值+标签，标签之间用@分隔，属性值是NA的用？代替#####
#####最后一个属性是关于边的#####
setwd("C:\\Users\\1231\\Desktop\\dataprocessing")
library(RWeka)
source("find_labels.R")
source("attribute_adjust.R")
#####从HieraGOdata20.txt中导入所有边并通过如果路径a/b中,a,b任意一个是已知节点范围之外的节点就去掉的逻辑筛选掉不存在的边#####
originaledgedata <- scan("HieraGOdata20.txt",what = character())
originaledgedata <- unlist(strsplit(originaledgedata,","))
edgelist <- list()
invalidnum <- vector()
#####由于except.root.labels2中无GO0008150（之前说大家都属于它，给删掉了），GO0008150应当是根节点的存在但edgelist里面有root,有GO0008150，把root都改成GO0008150#####
#####故在except.root.labels2加入GO0008150#####
add.labels <- c("GO0008150",except.root.labels2)
for (i in 1:length(originaledgedata)) {
edgelist[[i]] <- unlist(strsplit(originaledgedata[i],"/"))
if (FALSE %in% (edgelist[[i]] %in% add.labels))
{
invalidnum <- c(invalidnum,i)
}
}
edgelist <- edgelist[-invalidnum]
edgedata <- vector()
for (i in 1:length(edgelist)) {
edgedata[i] <- paste(edgelist[[i]],collapse = "/")
}
edgedata <- gsub("GO0008150","root",edgedata)
# lastattribute <- vector()
# for (i in 1:length(listexrootClassesPaths)) {
#   for (j in 1:length(listexrootClassesPaths[[i]])) {
#     lastattribute <- c(lastattribute,listexrootClassesPaths[[i]][j])
#   }
#
# }
# lastattribute <- gsub("/GO","%GO",lastattribute)
# lastattribute <- gsub("/","",lastattribute)
# lastattribute <- gsub("%","/",lastattribute)
#####划分labelled和unlabelled#####
tolabeltable <- rbind(train.select.table2,valid.select.table2)
tolabeldata <- rbind(train.select.data2,valid.select.data2)
numofrow <- nrow(tolabeltable)
numoflabelled <- round(numofrow/10)
labelledtable <- tolabeltable[1:numoflabelled,]
unlabelledtable <- tolabeltable[((numoflabelled+1):numofrow),]
labelleddata <- tolabeldata[1:numoflabelled,]
unlabelleddata <- tolabeldata[((numoflabelled+1):numofrow),]
#####拼接属性和标签#####
labelledlabels <- Findlabels(labelledtable)
unlabelledlabels <- Findlabels(unlabelledtable)
testlabels <- Findlabels(test.select.table2)
labelled.arff <- cbind(labelleddata,labelledlabels)
unlabelled.arff <- cbind(unlabelleddata,unlabelledlabels)
test.arff <- cbind(test.select.data2,testlabels)
#####设置存储路径#####
#####要改aa#####
aa <- 1
arff.path <- paste("C:\\Users\\1231\\Desktop\\dataprocessing\\data\\204arff\\arff",aa,sep = "")
setwd(arff.path)
#####形成arff文件#####
write.arff(labelled.arff,"labelled1.arff")
write.arff(unlabelled.arff,"unlabelled1.arff")
write.arff(test.arff,"test1.arff")
#####把最后一个attribute改成class#####
Adjustattribute("labelled1.arff","labelled.arff")
Adjustattribute("unlabelled1.arff","unlabelled.arff")
Adjustattribute("test1.arff","labeltest.arff")
write.table(except.root.labels2,"evalclasses.txt",quote = FALSE,sep = "\n",row.names = FALSE,col.names = FALSE)
View(edgelist)
edgedata
View(nodes.to.ancestors2)
nodes.to.ancestors2[["GO0000122"]]
View(nodes.to.descendants2)
grep("GO0016070/GO0006396",edgelist)
