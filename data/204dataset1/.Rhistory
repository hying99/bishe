prob.labels2[i,except.root.labels2[j]]=0
}
}
}
measure.result.original <- MHevaluate(prob.labels2,test.select.table2)
setwd("C:/Users/1231/Desktop/dataprocessing/data/204result")
write.table(measure.result.original,"original",datasetindex,".txt",sep = ",",eol="\n",row.names = FALSE,col.names = FALSE,quote = FALSE)
#####导入y#####
setwd("C:/Users/1231/Desktop/dataprocessing")
source("DAGlabel.R")
#####TPR修改的对数#####
changedlabels <- vector()
for (u in 1:nrow(prob.is.one))
{
for (v in 1:ncol(prob.is.one))
{
if(  predict.labels2[u,v] != prob.labels2[u,v] ){
changedlabels <-  c(changedlabels,paste(u,v,prob.labels2[u,v],predict.labels2[u,v],sep = ",",collapse = " "))
}
}
}
#####DAGlabel修改的对数#####
changedlabels2 <- vector()
for (u in 1:nrow(prob.is.one))
{
for (v in 1:ncol(prob.is.one))
{
if(  y[u,v] != prob.labels2[u,v] ){
changedlabels2 <-  c(changedlabels2,paste(u,v,prob.labels2[u,v],y[u,v],sep = ",",collapse = " "))
}
}
}
#
# #####DAGlabel修正错的标签#####
#
# wrongchanges <- vector()
# for (u in 1:nrow(prob.is.one))
# {
#   for (v in 1:ncol(prob.is.one))
#   {
#
#     if(  y[u,v] != prob.labels2[u,v] && y[u,v] != test.select.table2[u,v]){
#
#       wrongchanges <-  c(wrongchanges,paste(u,v,prob.labels2[u,v],y[u,v],sep = ",",collapse = " "))
#     }
#   }
# }
# #####分错，把1变成0的有92个 #####
# onetozeroF <- vector()
# for(i in 1:length(wrongchanges))
# {
#   if(as.numeric(strsplit(wrongchanges,",")[[i]][3]) == 1)
#    {
#     onetozeroF <- c(onetozeroF,i)
#   }
# }
# #####分对，把1变成0的#####
# onetozeroT <- vector()
# for(i in 1:length(changedlabels2))
# {
#   if(as.numeric(strsplit(changedlabels2,",")[[i]][3]) == 1)
#   {
#     onetozeroT <- c(onetozeroT,i)
#   }
# }
#####初始SVM分类结果里面违反层级约束needtochange的个数#####
needtochange <- vector()
violatesigma <- vector()
c11 <- vector()
for (u in 1:nrow(prob.labels2)) {
for (v in 1:ncol(prob.labels2)) {
if(FALSE %in% is.na(nodes.to.descendants2[[v]]))
{
for (q in 1:length(nodes.to.descendants2[[v]])) {
if (prob.labels2[u,v] < prob.labels2[u,nodes.to.descendants2[[v]][q]])
{
needtochange <- c(needtochange,paste(u,v,nodes.to.descendants2[[v]][q],sep = ",",collapse = ""))
violatesigma <- c(violatesigma,paste(sigma[u,v],sigma[u,nodes.to.descendants2[[v]][q]],sep = ",",collapse = " "))
}
}
}
}
}
needtochangeall[[datasetindex]] <- needtochange
violatesigmaall[[datasetindex]] <- violatesigma
write.table(needtochangeall[[datasetindex]],paste("needtochange",datasetindex,".txt",sep = ""),sep = ",",eol="\n",quote=FALSE,row.names = FALSE,col.names = FALSE,append = FALSE)
needtochangelist <- strsplit(needtochange,",")
DAGwork <- vector()
TPRwork <- vector()
DAGright <- vector()
TPRright <- vector()
for (i in 1:length(needtochange)) {
if(y[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][2])] >= y[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][3])])
{
DAGwork <- c(DAGwork,i)
}
if(y[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][2])] == test.select.table2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][2])] &&
y[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][3])] == test.select.table2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][3])] )
{
DAGright <- c(DAGright,i)
}
if(predict.labels2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][2])] >= predict.labels2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][3])])
{
TPRwork <- c(TPRwork,i)
}
if(predict.labels2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][2])] == test.select.table2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][2])] &&
predict.labels2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][3])] == test.select.table2[as.numeric(needtochangelist[[i]][1]),as.numeric(needtochangelist[[i]][3])] )
{
TPRright <- c(TPRright,i)
}
}
# #####DAGlabel把父节点改成1是不是因为子节点是1父节点是0#####
# WORK <- vector()
# for(i in 1:length(changedlabels2))
# {
#   if(as.numeric(strsplit(changedlabels2,",")[[i]][4]) == 1 && FALSE %in% nodes.to.descendants2[[v]])
#   {
#     for (q in 1:length(nodes.to.descendants2[[v]])) {
#       if(prob.labels2[as.numeric(strsplit(changedlabels2,",")[[i]][1]),nodes.to.descendants2(as.numeric(strsplit(changedlabels2,",")[[i]][2]))] == 1)
#       {
#         WORK <- c(WORK,paste(u,v,sep = ",",collapse = " "))
#       }
#     }
#
#       }
# }
# #####DAGlabel把子节点改成0是不是因为父节点是0子节点是1#####
# WORK2 <- vector()
# for(i in 1:length(changedlabels2))
# {
#   if(as.numeric(strsplit(changedlabels2,",")[[i]][4]) == 0 && FALSE %in% nodes.to.ancestors2[[v]])
#   {
#     for (q in 1:length(nodes.to.ancestors2[[v]])) {
#       if(prob.labels2[as.numeric(strsplit(changedlabels2,",")[[i]][1]),nodes.to.ancestors2(as.numeric(strsplit(changedlabels2,",")[[i]][2]))] == 0)
#       {
#         WORK2 <- c(WORK2,paste(u,v,sep = ",",collapse = " "))
#       }
#     }
#
#   }
# }
effectresult[datasetindex,1] <- length(needtochange)
effectresult[datasetindex,2] <- length(changedlabels2)
effectresult[datasetindex,3] <- length(changedlabels)
effectresult[datasetindex,4] <- length(DAGwork)
effectresult[datasetindex,5] <- length(TPRwork)
effectresult[datasetindex,6] <- length(DAGright)
effectresult[datasetindex,7] <- length(TPRright)
}
write.csv(effectresult,"effectresult.csv",quote = FALSE,row.names = TRUE)
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
violatelabels <- list()
for (i in 1:length(needtochangeall)) {
needtochangelabels <- strsplit(needtochangeall[[i]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
}
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
View(violatelabels)
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
violatelabels <- list()
for (i in 1:length(needtochangeall)) {
needtochangelabels <- strsplit(needtochangeall[[i]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
ancestornodes <- needtochangelabels[[which(descendantnodes %in% needtochangeall)]][2]
}
}
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
violatelabels <- list()
for (i in 1:length(needtochangeall)) {
needtochangelabels <- strsplit(needtochangeall[[i]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
}
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- ancestornodes
violatelabels[[4]] <- ancestorlevels
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
violatelabels <- list()
for (i in 1:length(needtochangeall)) {
needtochangelabels <- strsplit(needtochangeall[[i]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
}
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- ancestornodes
violatelabels[[4]] <- ancestorlevels
View(violatelabels)
View(effectresult)
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
datasetindex = 1
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- sigma[needtochangelabels[[j]][1],needtochangelabels[[j]][2]]
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- ancestornodes
violatelabels[[4]] <- ancestorlevels
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- sigma[needtochangelabels[[j]][1],needtochangelabels[[j]][2]]
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- ancestornodes
violatelabels[[4]] <- ancestorlevels
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][2])]
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- sigmadescendants
violatelabels[[4]] <- ancestornodes
violatelabels[[5]] <- ancestorlevels
View(violatesigmaall)
View(violatelabels)
View(needtochangelabels)
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- c(sigmadescendants,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][2])])
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- sigmadescendants
violatelabels[[4]] <- ancestornodes
violatelabels[[5]] <- ancestorlevels
View(violatelabels)
View(violatesigmaall)
View(withroot.nodes.to.children2)
View(violatesigmaall)
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- c(sigmadescendants,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][2])])
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
sigmaancestors <- c(sigmaancestors,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][3])])
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- sigmadescendants
violatelabels[[4]] <- ancestornodes
violatelabels[[5]] <- ancestorlevels
violatelabels[[6]] <- sigmaancestors
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
sigmadescendants <- vector()
sigmaancestors <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- c(sigmadescendants,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][2])])
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
sigmaancestors <- c(sigmaancestors,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][3])])
}
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- sigmadescendants
violatelabels[[4]] <- ancestornodes
violatelabels[[5]] <- ancestorlevels
violatelabels[[6]] <- sigmaancestors
View(violatelabels)
View(sigma)
View(sigma)
sort(sigma[1,],decreasing = TRUE)
which(sort(sigma[1,],decreasing = TRUE))
which(sort(sigma[1,],decreasing = TRUE) %in% sigma[1,])
which(sigma[1,] %in% sort(sigma[1,],decreasing = TRUE))
rank(sigma[1,])
order(sigma[1,],decreasing = TRUE)
order(colMeans(sigma),decreasing = TRUE)
View(go.for.level2)
View(go.for.level.index2)
View(go.for.level2)
View(go.for.level.index2)
go.for.level.index2[[1]]
level.num(order(colMeans(sigma),decreasing = TRUE))
#####分析sigma大的值有什么特点
#####先排序#####
sigmarank <- order(colMeans(sigma),decreasing = TRUE)
#####sigma大是因为层级结构深吗#####
sigmalevel <- levelClasses[sigmarank]
sigmalevel
View(nodes.to.children2)
nodes.to.children2[[55]]
nodes.to.children2[[13]]
nodes.to.descendants2[[13]]
nodes.to.descendants2[[55]]
#####sigma大是因为子节点多吗#####
sigmachildnum <- length(nodes.to.children2[[sigmarank]])
#####sigma大是因为子节点多吗#####
sigmachildnum <- length(nodes.to.children2[[sigmarank]])
sigmachildnum <- vector()
for (i in 1:length(sigmarank)) {
sigmachildnum[i] <- length(nodes.to.children2[[sigmarank[i]]])
}
sigmachildnum <- vector()
for (i in 1:length(sigmarank)) {
sigmachildnum[i] <- length(nodes.to.children2[[sigmarank[i]-1]])
}
sigmarank <- order(colMeans(sigma),decreasing = TRUE)
#####sigma大是因为层级结构深吗#####
sigmalevel <- levelClasses[sigmarank]
#####sigma大是因为子节点多吗#####
sigmachildnum <- vector()
for (i in 1:length(sigmarank)) {
sigmachildnum[i] <- length(nodes.to.children2[[(sigmarank[i]-1)]])
}
sigmachildnum <- vector()
for (i in 1:length(sigmarank)) {
sigmachildnum[i] <- length(nodes.to.children2.ch[[(sigmarank[i]-1)]])
}
View(nodes.to.children2.ch)
sigmachildnum <- vector()
for (i in 1:length(sigmarank)) {
sigmachildnum[i] <- length(nodes.to.children2.ch[[(sigmarank[i])]])
}
sigmachildnum
#####sigma大是因为层级结构深吗#####
sigmalevel <- levelClasses[sigmarank]
sigmalevel
probrank <- order(colMeans(prob.is.one),decreasing = TRUE)
probrank
sigmarank
nodes.to.children2[[5]]
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
sigmadescendants <- vector()
sigmaancestors <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
# for (i in 1:length(needtochangeall)) {
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- c(sigmadescendants,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][2])])
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
sigmaancestors <- c(sigmaancestors,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][3])])
}
# }
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- sigmadescendants
violatelabels[[4]] <- ancestornodes
violatelabels[[5]] <- ancestorlevels
violatelabels[[6]] <- sigmaancestors
View(violatelabels)
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
sigmadescendants <- vector()
sigmaancestors <- vector()
violatelabels <- data.frame()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
# for (i in 1:length(needtochangeall)) {
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- c(sigmadescendants,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][2])])
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
sigmaancestors <- c(sigmaancestors,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][3])])
}
# }
violatelabels[,1] <- descendantnodes
violatelabels[,2] <- descendantlevels
violatelabels[,3] <- sigmadescendants
violatelabels[,4] <- ancestornodes
violatelabels[,5] <- ancestorlevels
violatelabels[,6] <- sigmaancestors
#####此部分为探究违反层级约束的节点对所处的层级结构#####
descendantnodes <- vector()
ancestornodes <- vector()
sigmadescendants <- vector()
sigmaancestors <- vector()
violatelabels <- list()
#####用needtochange最多的第一组做实验，这组也是性能差距最大的#####
# for (i in 1:length(needtochangeall)) {
datasetindex = 1
setwd("C:/Users/1231/Desktop/dataprocessing")
source("chloss2.R")
needtochangelabels <- strsplit(needtochangeall[[1]],",")
for (j in 1:length(needtochangelabels)) {
descendantnodes <- c(descendantnodes,needtochangelabels[[j]][3])
# descendantnodes <- unique(descendantnodes)
descendantlevels <- levelClasses[as.numeric(descendantnodes)]
sigmadescendants <- c(sigmadescendants,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][2])])
ancestornodes <- c(ancestornodes,needtochangelabels[[j]][2])
ancestorlevels <- levelClasses[as.numeric(ancestornodes)]
sigmaancestors <- c(sigmaancestors,sigma[as.numeric(needtochangelabels[[j]][1]),as.numeric(needtochangelabels[[j]][3])])
}
# }
violatelabels[[1]] <- descendantnodes
violatelabels[[2]] <- descendantlevels
violatelabels[[3]] <- sigmadescendants
violatelabels[[4]] <- ancestornodes
violatelabels[[5]] <- ancestorlevels
violatelabels[[6]] <- sigmaancestors
as.data.frame(violatelabels)
violatelabelsdataframe <- as.data.frame(violatelabels)
View(violatelabelsdataframe)
colnames(violatelabelsdataframe) <- c("descendantnodes","descendantlevels","sigmadescendants","ancestornodes","ancestorlevels","sigmaancestors")
View(violatelabelsdataframe)
write.csv(violatelabelsdataframe,"violatelabels.csv",row.names = FALSE,col.names = TRUE)
write.csv(violatelabelsdataframe,"violatelabels.csv",row.names = FALSE)
getwd()
