namesClasses <- vector("list",numLevels)
for(i in 2:numLevels){
regExpClass <- paste("^",i,"$",sep="")
posClassesLevel <- grep(regExpClass,levelClasses)
for(j in 1:length(posClassesLevel)){
namesClasses[[i]] <- c(namesClasses[[i]],listexrootClassesLevels[[posClassesLevel[j]]][1])
}
}
go.for.level2 <- namesClasses
go.for.level2[[1]] <- NULL
#建立索引nodes.to.index2
nodes.to.index2 <- as.list(1:length(except.root.labels2))
names(nodes.to.index2) <- except.root.labels2
#搜索子节点,建立nodes.to.children,nodes.to.parents,
children.nodes2 <- vector("list")
parents.nodes2 <- vector("list")
index2 <- vector("list")
children.index2 <- vector("list")
nextindex2 <- vector("list")
#names(index) <- except.root.labels2
nodes.to.children2 <- vector("list")
nodes.to.parents2 <- vector("list")
nodes.to.ancestors2 <- vector("list")
nodes.to.descendants2 <- vector("list",length = length(except.root.labels2))
#names(index) <- except.root.labels2
go.leaf.nodes2 <- vector()
for (i in 1:length(except.root.labels2))
{
cat(i,"\n")
#搜索class[i]在全部listexrootclassesPaths的位置索引
parentclasses2 <- except.root.labels2[i]
#index2是except.root.labels2[i]在listexrootClassesPaths出现的位置
index2[[parentclasses2]] <- grep(parentclasses2,listexrootClassesPaths)
#class[i]不只出现一次，index2[i]里有多个元素
for (k in 1:length(index2[[i]])) {
#搜索在含某class的listexrootclassesPaths的内部位置
aa <- vector()
for (j in 1:length(eachnodeslevels[[index2[[i]][k]]])) {
#某个节点的paths数量
#cat(j,"\n")
bb <- vector()
if(sum(grepl(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])) != 0)
{
#bb是except.root.labels2[i]在具体某个节点的j个paths里面出现的位置
bb <- grep(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])
#在eachnodeslevels里找子节点父节点
children.nodes2[[parentclasses2]] <- c(children.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb+1])
parents.nodes2[[parentclasses2]] <- c(parents.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb-1])
aa <- c(aa,bb)
}
}
nextindex2[[k]] <- list(aa)
#children.index2[[i]]的数量是节点总共在路径中出现的次数，children.index[[i]]里有几个list对应着index2[[i]]里元素个数，这个节点总共出现几次
#index2[[i]]里是大路径的索引k，索引1对应children.index2[[i]]里的第一个list，list里的元素就是在这个大路径k下的多个小路径，这个class所在的位置，但NA是缺失的
children.index2[[except.root.labels2[i]]] <- c(children.index2[[except.root.labels2[i]]],nextindex2[[k]])
}
children.nodes2[[i]] <- unique(children.nodes2[[i]])
parents.nodes2[[i]] <- unique(parents.nodes2[[i]])
nodes.to.children2[[parentclasses2]] <- grep(paste(children.nodes2[[i]],collapse = "|"),except.root.labels2)
nodes.to.parents2[[parentclasses2]] <- grep(paste(parents.nodes2[[i]],collapse = "|"),except.root.labels2)
children.nodes2[[i]] <- na.omit(children.nodes2[[i]])
#查找叶子节点
if (length(nodes.to.children2[[except.root.labels2[i]]]) == 0)
{
go.leaf.nodes2 <- c(go.leaf.nodes2,names(nodes.to.children2[except.root.labels2[i]]))
}
nodes.to.ancestors2[[except.root.labels2[i]]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
ipos <- paste("^",i,"$",sep="")
nodes.to.ancestors2[[except.root.labels2[i]]] <- nodes.to.ancestors2[[except.root.labels2[i]]][-grep(ipos,nodes.to.ancestors2[[except.root.labels2[i]]])]
#建立nodes.to.descendants2
# nodes.to.descendants2[[except.root.labels2[i]]] <- nodes.to.children2[[except.root.labels2[i]]]
#
# if(length(nodes.to.children2[[except.root.labels2[i]]]) > 0)
# {
# for (m in 1:length(nodes.to.children2[[except.root.labels2[i]]])) {
#   nodes.to.descendants2[[except.root.labels2[i]]] <- c(nodes.to.descendants2[[except.root.labels2[i]]], nodes.to.children2[[except.root.labels2[nodes.to.children2[[except.root.labels2[i]]][m]]]])
# }
# }
# nodes.to.descendants2[[except.root.labels2[i]]] <- unique(nodes.to.descendants2[[except.root.labels2[i]]])
}
#20210131改，遍历子孙节点
names(nodes.to.descendants2) <- except.root.labels2
for (m in 1:length(except.root.labels2)) {
for (n in 1:length(except.root.labels2)) {
if ( m %in% nodes.to.ancestors2[[except.root.labels2[n]]] == TRUE)
nodes.to.descendants2[[except.root.labels2[m]]] <- c(nodes.to.descendants2[[except.root.labels2[m]]],n)
}
if (length(nodes.to.descendants2[[except.root.labels2[m]]]) == 0)
nodes.to.descendants2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.children2[[except.root.labels2[m]]]) == 0)
nodes.to.children2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.ancestors2[[except.root.labels2[m]]]) == 0)
nodes.to.ancestors2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.parents2[[except.root.labels2[m]]]) == 0)
nodes.to.parents2[[except.root.labels2[m]]] <- NA
}
#去掉不属于BP功能的CC.nodes的子孙节点，以及召回率不好的节点的子孙节点20210201
CC.nodes2 <- c("GO0044710", "GO0044763", "GO0044699", "GO0044707", "GO0044767", "GO0007067", "GO0044700", "GO0044702")
CC.nodes.pos2 <- which(except.root.labels2 %in% CC.nodes2)
CC.nodes.pos2 <- c(CC.nodes.pos2,85,87,133,135,136,140,163,189,221,224,225,236,244,246)
CC.nodes2 <- except.root.labels2[CC.nodes.pos2]
removeindex <- CC.nodes.pos2
for (i in 1:length(CC.nodes.pos2)) {
removeindex <- na.omit(unique(c(removeindex,nodes.to.descendants2[[CC.nodes2[i]]])))
}
removelabels <- except.root.labels2[removeindex]
except.root.labels2 <- except.root.labels2[-removeindex]
except.root.table2 <- except.root.table2[,-removeindex]
exrootClassesPaths <- exrootClassesPaths[-removeindex]
listexrootClassesPaths <- listexrootClassesPaths[-removeindex]
listexrootClassesLevels <- listexrootClassesLevels[-removeindex]
setwd("C:/Users/Administrator/Desktop/dataprocessing")
source("nodescreation.R")
###设置路径
setwd("C:/Users/Administrator/Desktop/dataprocessing")
source("dataset_select2.R")
source("dataset_divide.R")
###选择训练集 1、2、3、4、5
datasetindex <- 1
datasetresult = DatasetSelect(dataset.index = datasetindex)
select.table <- datasetresult[[1]]
select.data <- datasetresult[[2]]
###拆分训练集train:test=2:1
selecttabletodivide <- DatasetDivide(dataset = select.table)
train.select.table2 <- selecttabletodivide[[1]]
valid.select.table2 <- selecttabletodivide[[2]]
test.select.table2 <- selecttabletodivide[[3]]
selectdatatodivide <- DatasetDivide(dataset=select.data)
train.select.data2 <- selectdatatodivide[[1]]
valid.select.data2 <- selectdatatodivide[[2]]
test.select.data2 <- selectdatatodivide[[3]]
setwd("C:/Users/Administrator/Desktop/dataprocessing/library")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
library(gpls)
library(plsgenomics)
library(keras)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("read_predict_arff.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_train_NegGOA.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("naive_downtop.R")#用于实现down top方式得出最终结果
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("pr_auc_calculate.R")
source("prauc_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detectprob.R")
source("violate_detectlabel.R")
source("data_process.R")
source("dataset_rebuild.R")
source("dataset_select.R")
source("factor_to_num.R")
source("new_pathrule.R")#用于实现基于父子节点修改概率的后期处理方法
source("BN_compute.R")#用于实现基于贝叶斯网络修改概率的后期处理方法
source("BN_compute2.R")#用于实现基于贝叶斯网络修改概率的后期处理方法,先验概率设置为0.5
source("nn_get_dataset.R")#用于神经网络算法中生成整合父节点标签的数据集
source("get_ancestor_dataset.R")#用于神经网络算法中生成整合祖先节点标签的数据集
#节点for chloss
#包含根节点
# select.nodes2 <- gsub("GO","GO:",except.root.labels2)
select.nodes2 <- c("GO0008150",except.root.labels2)
nodes.total.num=length(select.nodes2)
#each.go.level.num2,go.for.level2的向量表示，某一个GO属于哪个层次
each.go.level.num2 <- vector(length = length(except.root.labels2))
names(each.go.level.num2) <- except.root.labels2
for (i in 1:length(except.root.labels2)) {
each.go.level.num2[except.root.labels2[i]] <- grep(except.root.labels2[i],go.for.level2)
}
#each.level.nodes.num2,每一个层次有几个节点
each.level.nodes.num2 <- vector("list")
for (j in 1:length(go.for.level2)) {
each.level.nodes.num2[[j]] <- length(go.for.level2[[j]])
}
names(each.level.nodes.num2) <- 1:length(go.for.level2)
#含根节点的nodes
nodes.to.parents2.ch <- vector("list",length = nodes.total.num)
nodes.to.children2.ch <- vector("list",length = nodes.total.num)
nodes.to.ancestors2.ch <- vector("list",length = nodes.total.num)
nodes.to.descendants2.ch <- vector("list",length = nodes.total.num)
nodes.to.index2.ch <- vector("list",length = nodes.total.num)
include.root.labels2 <- c("GO0008150",except.root.labels2)
names(nodes.to.index2.ch) <- include.root.labels2
names(nodes.to.parents2.ch) <- include.root.labels2
for (m in 1:length(include.root.labels2)) {
nodes.to.index2.ch[[include.root.labels2[m]]] <- m-1
nodes.to.parents2.ch[[include.root.labels2[1]]] <- NA
names(nodes.to.children2.ch) <- include.root.labels2
nodes.to.children2.ch[[include.root.labels2[1]]] <- which(except.root.labels2%in%go.for.level2[[1]])
names(nodes.to.ancestors2.ch) <- include.root.labels2
if (NA %in% nodes.to.ancestors2[[include.root.labels2[m]]])
{
nodes.to.ancestors2.ch[[include.root.labels2[m]]] <- 0L
}
else
{
nodes.to.ancestors2.ch[[include.root.labels2[m]]] <- c(0L,nodes.to.ancestors2[[include.root.labels2[m]]])
}
nodes.to.ancestors2.ch[[include.root.labels2[1]]] <- NA
names(nodes.to.descendants2.ch) <- include.root.labels2
nodes.to.descendants2.ch[[include.root.labels2[1]]] <- 1:204
for (k in 2:length(include.root.labels2)) {
nodes.to.parents2.ch[[include.root.labels2[k]]] <- nodes.to.parents2[[except.root.labels2[k-1]]]
nodes.to.children2.ch[[include.root.labels2[k]]] <- nodes.to.children2[[except.root.labels2[k-1]]]
nodes.to.descendants2.ch[[include.root.labels2[k]]] <- nodes.to.descendants2[[except.root.labels2[k-1]]]
}
for (j in 1:length(go.for.level2[[1]])) {
nodes.to.parents2.ch[[go.for.level2[[1]][j]]] <- 0L
}
}
####实现chloss的程序文件 其中pi直接取为svm的输出结果
####20181218
# #输入带有根结点的节点列表，根结点的序号为0
# total.index.ch = MakeIndex(select.node, include.root = TRUE)
# nodes.to.index.ch = total.index.ch[[1]]
# nodes.to.children.ch = total.index.ch[[2]]
# nodes.to.ancestors.ch = total.index.ch[[3]]
# nodes.to.parents.ch = total.index.ch[[4]]
# nodes.to.descendants.ch = total.index.ch[[5]]
# #### 将SVM的概率结果读入
# file.middle = "0"
# file.type = ""
#设置mat文件存储路径
#setwd(paste(data.path,"//matfile",sep = ""))
library(R.matlab)
datapath <- paste("204dataset",datasetindex,sep = "")
setwd(paste("D:/坚果云/dataprocessing/data/",datapath,sep = ""))
mat.file=("newdataset_decision.mat")
probability.data2=readMat(mat.file,fixNames = FALSE)
#prob.for.genes  存储时，对每个节点来说，第一位是为label1的概率，而后是为0的概率
prob.for.genes2=probability.data2$decision_test
w1=1
w3=1
w2=2
w4=2
c.matrix=matrix(0,nodes.total.num,1)
c.matrix[1,1]=1
go.for.level.index2 <- vector("list",length = length(go.for.level2))
for (j in 1:length(go.for.level.index2)) {
go.for.level.index2[[j]] <- which(except.root.labels2 %in% go.for.level2[[j]])
}
#计算Ci,该值仅与节点有关，对每个样本均相同
for(k in 1:length(go.for.level.index2))
{
for (i in 1:length(go.for.level.index2[[k]])) {
if( k == 1)
{
sibling.num2=each.level.nodes.num2[[1]]
c.matrix[((go.for.level.index2[[1]][i])+1),1]=1/sibling.num2
}
else
{
parentnode.num2=length(nodes.to.parents2[[except.root.labels2[go.for.level.index2[[k]][i]]]])
current.c=0
for(j in 1:parentnode.num2)
{
parentnode.index2=nodes.to.parents2[[except.root.labels2[go.for.level.index2[[k]][i]]]][j]
sibling.num2=length(nodes.to.children2[[except.root.labels2[parentnode.index2]]])
#current.c=current.c+c.matrix[parentnode.index2,1]/sibling.num2
current.c=current.c+c.matrix[(parentnode.index2+1),1]/sibling.num2
}
# c.matrix[((go.for.level.index2[[k]][i])+1),1] = current.c
c.matrix[((go.for.level.index2[[k]][i])+1),1]=current.c/parentnode.num2
}
}
}
###变换节点函数只需要这一块注释/拿走注释
c.matrix=matrix(1,nodes.total.num,1)
#提取各节点为1的概率矩阵
prob.is.one=matrix(0,nrow(prob.for.genes2),(nodes.total.num-1))
for(i in 1:nrow(prob.for.genes2))
{
for(j in 1:(nodes.total.num-1))
{
prob.is.one[i,j]=prob.for.genes2[i,(2*j-1)]
}
}
#计算pi
p.matrix=cbind(matrix(1,nrow(prob.for.genes2),1),prob.is.one)
sigma.one=matrix(0,nrow(prob.for.genes2),nodes.total.num)
sigma.two=matrix(0,nrow(prob.for.genes2),nodes.total.num)
#求解sigma(1)
for(k in 1:nrow(prob.for.genes2))
{
for(i in 1:nodes.total.num)
{
cur.node=select.nodes2[i]
is.leafnode=cur.node %in% go.leaf.nodes2
if(is.leafnode==TRUE)
{
sigma.one[k,i]=0
} else
{
children.index=nodes.to.children2.ch[[select.nodes2[i]]]
children.num=length(children.index)
inter.value=0
for(j in 1:children.num)
{
inter.value=inter.value+ c.matrix[(children.index[j]+1),1]*p.matrix[k,(children.index[j]+1)]
}
sigma.one[k,i]=(w2-w1)*inter.value
}
}
}
#求解sigma(2)
for(k in 1:nrow(prob.for.genes2))
{
for(i in 1:(nodes.total.num))
{
cur.node.index=i-1
if(nodes.to.index2.ch[i]==0)
{
sigma.two[k,i]=0
}else
{
parents.index=nodes.to.parents2.ch[[i]]
parents.num=length(parents.index)
inter.value=1
for(j in 1:parents.num)
{
inter.value=inter.value*p.matrix[k,(parents.index[j]+1)]
}
value.one=w1*c.matrix[i,1]*p.matrix[k,i]*parents.num
value.two=w3*c.matrix[i,1]*parents.num*(inter.value-p.matrix[k,i])
value.three=w4*c.matrix[i,1]*parents.num*(1-inter.value)
sigma.two[k,i]=value.one-value.two-value.three
}
}
}
sigma=sigma.one+sigma.two
View(sigma)
getwd()
write.csv(sigma,"sigma1.csv",quote = FALSE,row.names = FALSE)
###设置路径
setwd("C:/Users/Administrator/Desktop/dataprocessing")
source("dataset_select2.R")
source("dataset_divide.R")
###选择训练集 1、2、3、4、5
datasetindex <- 2
datasetresult = DatasetSelect(dataset.index = datasetindex)
select.table <- datasetresult[[1]]
select.data <- datasetresult[[2]]
###拆分训练集train:test=2:1
selecttabletodivide <- DatasetDivide(dataset = select.table)
train.select.table2 <- selecttabletodivide[[1]]
valid.select.table2 <- selecttabletodivide[[2]]
test.select.table2 <- selecttabletodivide[[3]]
selectdatatodivide <- DatasetDivide(dataset=select.data)
train.select.data2 <- selectdatatodivide[[1]]
valid.select.data2 <- selectdatatodivide[[2]]
test.select.data2 <- selectdatatodivide[[3]]
####实现chloss的程序文件 其中pi直接取为svm的输出结果
####20181218
# #输入带有根结点的节点列表，根结点的序号为0
# total.index.ch = MakeIndex(select.node, include.root = TRUE)
# nodes.to.index.ch = total.index.ch[[1]]
# nodes.to.children.ch = total.index.ch[[2]]
# nodes.to.ancestors.ch = total.index.ch[[3]]
# nodes.to.parents.ch = total.index.ch[[4]]
# nodes.to.descendants.ch = total.index.ch[[5]]
# #### 将SVM的概率结果读入
# file.middle = "0"
# file.type = ""
#设置mat文件存储路径
#setwd(paste(data.path,"//matfile",sep = ""))
library(R.matlab)
datapath <- paste("204dataset",datasetindex,sep = "")
setwd(paste("D:/坚果云/dataprocessing/data/",datapath,sep = ""))
mat.file=("newdataset_decision.mat")
probability.data2=readMat(mat.file,fixNames = FALSE)
#prob.for.genes  存储时，对每个节点来说，第一位是为label1的概率，而后是为0的概率
prob.for.genes2=probability.data2$decision_test
w1=1
w3=1
w2=2
w4=2
c.matrix=matrix(0,nodes.total.num,1)
c.matrix[1,1]=1
go.for.level.index2 <- vector("list",length = length(go.for.level2))
for (j in 1:length(go.for.level.index2)) {
go.for.level.index2[[j]] <- which(except.root.labels2 %in% go.for.level2[[j]])
}
#计算Ci,该值仅与节点有关，对每个样本均相同
for(k in 1:length(go.for.level.index2))
{
for (i in 1:length(go.for.level.index2[[k]])) {
if( k == 1)
{
sibling.num2=each.level.nodes.num2[[1]]
c.matrix[((go.for.level.index2[[1]][i])+1),1]=1/sibling.num2
}
else
{
parentnode.num2=length(nodes.to.parents2[[except.root.labels2[go.for.level.index2[[k]][i]]]])
current.c=0
for(j in 1:parentnode.num2)
{
parentnode.index2=nodes.to.parents2[[except.root.labels2[go.for.level.index2[[k]][i]]]][j]
sibling.num2=length(nodes.to.children2[[except.root.labels2[parentnode.index2]]])
#current.c=current.c+c.matrix[parentnode.index2,1]/sibling.num2
current.c=current.c+c.matrix[(parentnode.index2+1),1]/sibling.num2
}
# c.matrix[((go.for.level.index2[[k]][i])+1),1] = current.c
c.matrix[((go.for.level.index2[[k]][i])+1),1]=current.c/parentnode.num2
}
}
}
###变换节点函数只需要这一块注释/拿走注释
c.matrix=matrix(1,nodes.total.num,1)
#提取各节点为1的概率矩阵
prob.is.one=matrix(0,nrow(prob.for.genes2),(nodes.total.num-1))
for(i in 1:nrow(prob.for.genes2))
{
for(j in 1:(nodes.total.num-1))
{
prob.is.one[i,j]=prob.for.genes2[i,(2*j-1)]
}
}
#计算pi
p.matrix=cbind(matrix(1,nrow(prob.for.genes2),1),prob.is.one)
sigma.one=matrix(0,nrow(prob.for.genes2),nodes.total.num)
sigma.two=matrix(0,nrow(prob.for.genes2),nodes.total.num)
#求解sigma(1)
for(k in 1:nrow(prob.for.genes2))
{
for(i in 1:nodes.total.num)
{
cur.node=select.nodes2[i]
is.leafnode=cur.node %in% go.leaf.nodes2
if(is.leafnode==TRUE)
{
sigma.one[k,i]=0
} else
{
children.index=nodes.to.children2.ch[[select.nodes2[i]]]
children.num=length(children.index)
inter.value=0
for(j in 1:children.num)
{
inter.value=inter.value+ c.matrix[(children.index[j]+1),1]*p.matrix[k,(children.index[j]+1)]
}
sigma.one[k,i]=(w2-w1)*inter.value
}
}
}
#求解sigma(2)
for(k in 1:nrow(prob.for.genes2))
{
for(i in 1:(nodes.total.num))
{
cur.node.index=i-1
if(nodes.to.index2.ch[i]==0)
{
sigma.two[k,i]=0
}else
{
parents.index=nodes.to.parents2.ch[[i]]
parents.num=length(parents.index)
inter.value=1
for(j in 1:parents.num)
{
inter.value=inter.value*p.matrix[k,(parents.index[j]+1)]
}
value.one=w1*c.matrix[i,1]*p.matrix[k,i]*parents.num
value.two=w3*c.matrix[i,1]*parents.num*(inter.value-p.matrix[k,i])
value.three=w4*c.matrix[i,1]*parents.num*(1-inter.value)
sigma.two[k,i]=value.one-value.two-value.three
}
}
}
sigma=sigma.one+sigma.two
write.csv(sigma,"sigma2.csv",quote = FALSE,row.names = FALSE)
