nodes.to.ancestors2[[except.root.labels2[i]]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
ipos <- paste("^",i,"$",sep="")
nodes.to.ancestors2[[except.root.labels2[i]]] <- nodes.to.ancestors2[[except.root.labels2[i]]][-grep(ipos,nodes.to.ancestors2[[except.root.labels2[i]]])]
#建立nodes.to.descendants2
# nodes.to.descendants2[[except.root.labels2[i]]] <- nodes.to.children2[[except.root.labels2[i]]]
#
# if(length(nodes.to.children2[[except.root.labels2[i]]]) > 0)
# {
# for (m in 1:length(nodes.to.children2[[except.root.labels2[i]]])) {
#   nodes.to.descendants2[[except.root.labels2[i]]] <- c(nodes.to.descendants2[[except.root.labels2[i]]], nodes.to.children2[[except.root.labels2[nodes.to.children2[[except.root.labels2[i]]][m]]]])
# }
# }
# nodes.to.descendants2[[except.root.labels2[i]]] <- unique(nodes.to.descendants2[[except.root.labels2[i]]])
}
#20210131改，遍历子孙节点
names(nodes.to.descendants2) <- except.root.labels2
for (m in 1:length(except.root.labels2)) {
for (n in 1:length(except.root.labels2)) {
if ( m %in% nodes.to.ancestors2[[except.root.labels2[n]]] == TRUE)
nodes.to.descendants2[[except.root.labels2[m]]] <- c(nodes.to.descendants2[[except.root.labels2[m]]],n)
}
if (length(nodes.to.descendants2[[except.root.labels2[m]]]) == 0)
nodes.to.descendants2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.children2[[except.root.labels2[m]]]) == 0)
nodes.to.children2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.ancestors2[[except.root.labels2[m]]]) == 0)
nodes.to.ancestors2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.parents2[[except.root.labels2[m]]]) == 0)
nodes.to.parents2[[except.root.labels2[m]]] <- NA
}
#20201216
#建立except.root.table2
except.root.labels2 <-  allClasses[allClasses != "root"]
except.root.table2 <- as.data.frame(matrix(data=0,nrow=length(dataset2[,1]),ncol=length(except.root.labels2)))
colnames(except.root.table2) <- except.root.labels2
rownames(except.root.table2) <- dataset2[,1]
nrowDataset2 <- nrow(dataset2)
ncolDataset2 <- ncol(dataset2)
#indexClassesLevels里去掉根节点的路径
exrootindexClassesLevels <- vector("list",length(except.root.labels2))
exrootClassesPaths <- allClassesPaths[-grep("root",allClasses)]
for (i in 1:length(except.root.labels2)) {
exrootindexClassesLevels[[i]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
}
for(j in 1:nrowDataset2){
classes <- as.character(dataset2[j,ncolDataset2])
if(length(grep("@",classes) > 0)){
classes <- unlist(strsplit(classes,"@"))
}
#remove the illegal classes
posIllegal <- grep(paste(illegalClasses,collapse="|"),classes)
if(length(posIllegal) > 0){
classes <- classes[-posIllegal]
}
#找到数据集的GO标签在allclasses中的位置，在dataframeclasses中对应位置将全部父类标记为1（通过indexClassesLevels的数据）
#There are instances that are assigned only to the illegal classes.
#In this case they will not be classified in any class
if(length(classes) > 0){
#Set to 1 the class position and the position of all superclasses of the class
#allPositions是样本所属类的位置，indexClassesLevels[allPositions]是类的所有父类的索引位置。
allPositions2 <- grep(paste(classes,collapse="|"),except.root.labels2)
#zhangjp
#zhangjp
except.root.table2[j,unique(unlist(exrootindexClassesLevels[allPositions2]))] <- 1
}
}
invalidindex <- vector()
for (k in 1:ncol(except.root.table2)) {
if (sum(except.root.table2[,k]) <  50)
{
invalidindex <- c(invalidindex,k)
}
}
# CC.nodes2 <- c("GO0044710", "GO0044763", "GO0044699", "GO0044707", "GO0044767", "GO0007067", "GO0044700", "GO0044702")
# CC.nodes.pos2 <- which(except.root.labels2 %in% CC.nodes2)
# invalidindex <- c(invalidindex,CC.nodes.pos2)
# invalidlabels <- except.root.labels2[invalidindex]
except.root.labels2 <- except.root.labels2[-invalidindex]
except.root.table2 <- except.root.table2[,-invalidindex]
exrootClassesPaths <- exrootClassesPaths[-invalidindex]
#提取classesPerLevel，go.for.level2
listexrootClassesLevels <- listAllClassesLevels[-grep("root",allClasses)]
listexrootClassesLevels <- listexrootClassesLevels[-invalidindex]
#20201216建立新数据集的GO变量
#去掉listexrootClassesLevels的第一个元素
listexrootClassesPaths <- vector("list")
#构造eachnodeslevels，一去掉list里的第一个元素（节点自身），二把路径（一长串string“a/b/c/d”拆成有顺序的多个元素”a””b””c””d”
eachnodeslevels <- vector("list",length = length(listexrootClassesPaths))
for (t in 1:length(listexrootClassesLevels)) {
listexrootClassesPaths[[t]] <- listexrootClassesLevels[[t]][-1]
eachnodeslevels[[t]] <- strsplit(listexrootClassesPaths[[t]],"/")
}
eachnodeslevels2 <- eachnodeslevels
levelClasses <- vector("numeric",length(listexrootClassesLevels))
for(j in 1:length(levelClasses)){
numEdges <- vector()
allPaths <- listexrootClassesLevels[[j]][2:length(listexrootClassesLevels[[j]])]
for(k in 1:length(allPaths)){
numEdges <- c(numEdges,length(unlist(strsplit(allPaths[k],"/"))))
}
levelClasses[j] <- max(numEdges)
}
#cat(levelClasses,"\n")
#Number of levels
numLevels <- max(unique(levelClasses))
namesClasses <- vector("list",numLevels)
for(i in 2:numLevels){
regExpClass <- paste("^",i,"$",sep="")
posClassesLevel <- grep(regExpClass,levelClasses)
for(j in 1:length(posClassesLevel)){
namesClasses[[i]] <- c(namesClasses[[i]],listexrootClassesLevels[[posClassesLevel[j]]][1])
}
}
go.for.level2 <- namesClasses
go.for.level2[[1]] <- NULL
#建立索引nodes.to.index2
nodes.to.index2 <- as.list(1:length(except.root.labels2))
names(nodes.to.index2) <- except.root.labels2
#搜索子节点,建立nodes.to.children,nodes.to.parents,
children.nodes2 <- vector("list")
parents.nodes2 <- vector("list")
index2 <- vector("list")
children.index2 <- vector("list")
nextindex2 <- vector("list")
#names(index) <- except.root.labels2
nodes.to.children2 <- vector("list")
nodes.to.parents2 <- vector("list")
nodes.to.ancestors2 <- vector("list")
nodes.to.descendants2 <- vector("list",length = length(except.root.labels2))
#names(index) <- except.root.labels2
go.leaf.nodes2 <- vector()
for (i in 1:length(except.root.labels2))
{
cat(i,"\n")
#搜索class[i]在全部listexrootclassesPaths的位置索引
parentclasses2 <- except.root.labels2[i]
#index2是except.root.labels2[i]在listexrootClassesPaths出现的位置
index2[[parentclasses2]] <- grep(parentclasses2,listexrootClassesPaths)
#class[i]不只出现一次，index2[i]里有多个元素
for (k in 1:length(index2[[i]])) {
#搜索在含某class的listexrootclassesPaths的内部位置
aa <- vector()
for (j in 1:length(eachnodeslevels[[index2[[i]][k]]])) {
#某个节点的paths数量
#cat(j,"\n")
bb <- vector()
if(sum(grepl(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])) != 0)
{
#bb是except.root.labels2[i]在具体某个节点的j个paths里面出现的位置
bb <- grep(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])
#在eachnodeslevels里找子节点父节点
children.nodes2[[parentclasses2]] <- c(children.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb+1])
parents.nodes2[[parentclasses2]] <- c(parents.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb-1])
aa <- c(aa,bb)
}
}
nextindex2[[k]] <- list(aa)
#children.index2[[i]]的数量是节点总共在路径中出现的次数，children.index[[i]]里有几个list对应着index2[[i]]里元素个数，这个节点总共出现几次
#index2[[i]]里是大路径的索引k，索引1对应children.index2[[i]]里的第一个list，list里的元素就是在这个大路径k下的多个小路径，这个class所在的位置，但NA是缺失的
children.index2[[except.root.labels2[i]]] <- c(children.index2[[except.root.labels2[i]]],nextindex2[[k]])
}
children.nodes2[[i]] <- unique(children.nodes2[[i]])
parents.nodes2[[i]] <- unique(parents.nodes2[[i]])
nodes.to.children2[[parentclasses2]] <- grep(paste(children.nodes2[[i]],collapse = "|"),except.root.labels2)
nodes.to.parents2[[parentclasses2]] <- grep(paste(parents.nodes2[[i]],collapse = "|"),except.root.labels2)
children.nodes2[[i]] <- na.omit(children.nodes2[[i]])
#查找叶子节点
if (length(nodes.to.children2[[except.root.labels2[i]]]) == 0)
{
go.leaf.nodes2 <- c(go.leaf.nodes2,names(nodes.to.children2[except.root.labels2[i]]))
}
nodes.to.ancestors2[[except.root.labels2[i]]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
ipos <- paste("^",i,"$",sep="")
nodes.to.ancestors2[[except.root.labels2[i]]] <- nodes.to.ancestors2[[except.root.labels2[i]]][-grep(ipos,nodes.to.ancestors2[[except.root.labels2[i]]])]
#建立nodes.to.descendants2
# nodes.to.descendants2[[except.root.labels2[i]]] <- nodes.to.children2[[except.root.labels2[i]]]
#
# if(length(nodes.to.children2[[except.root.labels2[i]]]) > 0)
# {
# for (m in 1:length(nodes.to.children2[[except.root.labels2[i]]])) {
#   nodes.to.descendants2[[except.root.labels2[i]]] <- c(nodes.to.descendants2[[except.root.labels2[i]]], nodes.to.children2[[except.root.labels2[nodes.to.children2[[except.root.labels2[i]]][m]]]])
# }
# }
# nodes.to.descendants2[[except.root.labels2[i]]] <- unique(nodes.to.descendants2[[except.root.labels2[i]]])
}
#20210131改，遍历子孙节点
names(nodes.to.descendants2) <- except.root.labels2
for (m in 1:length(except.root.labels2)) {
for (n in 1:length(except.root.labels2)) {
if ( m %in% nodes.to.ancestors2[[except.root.labels2[n]]] == TRUE)
nodes.to.descendants2[[except.root.labels2[m]]] <- c(nodes.to.descendants2[[except.root.labels2[m]]],n)
}
if (length(nodes.to.descendants2[[except.root.labels2[m]]]) == 0)
nodes.to.descendants2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.children2[[except.root.labels2[m]]]) == 0)
nodes.to.children2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.ancestors2[[except.root.labels2[m]]]) == 0)
nodes.to.ancestors2[[except.root.labels2[m]]] <- NA
if (length(nodes.to.parents2[[except.root.labels2[m]]]) == 0)
nodes.to.parents2[[except.root.labels2[m]]] <- NA
}
#去掉不属于BP功能的CC.nodes的子孙节点，以及召回率不好的节点的子孙节点20210201
CC.nodes2 <- c("GO0044710", "GO0044763", "GO0044699", "GO0044707", "GO0044767", "GO0007067", "GO0044700", "GO0044702")
CC.nodes.pos2 <- which(except.root.labels2 %in% CC.nodes2)
# CC.nodes.pos2 <- c(CC.nodes.pos2,85,87,133,135,136,140,163,189,221,224,225,236,244,246)
# CC.nodes2 <- except.root.labels2[CC.nodes.pos2]
removeindex <- CC.nodes.pos2
for (i in 1:length(CC.nodes.pos2)) {
removeindex <- na.omit(unique(c(removeindex,nodes.to.descendants2[[CC.nodes2[i]]])))
}
removelabels <- except.root.labels2[removeindex]
except.root.labels2 <- except.root.labels2[-removeindex]
except.root.table2 <- except.root.table2[,-removeindex]
exrootClassesPaths <- exrootClassesPaths[-removeindex]
listexrootClassesPaths <- listexrootClassesPaths[-removeindex]
listexrootClassesLevels <- listexrootClassesLevels[-removeindex]
setwd("C:/Users/1231/Desktop/dataprocessing")
source("nodescreation.R")
###设置路径
setwd("C:/Users/1231/Desktop/dataprocessing")
source("dataset_select2.R")
source("dataset_divide.R")
###选择训练集 1、2、3、4、5
datasetindex <- 1
datasetresult = DatasetSelect(dataset.index = datasetindex)
select.table <- datasetresult[[1]]
select.data <- datasetresult[[2]]
###拆分训练集train:test=2:1
selecttabletodivide <- DatasetDivide(dataset = select.table)
train.select.table2 <- selecttabletodivide[[1]]
valid.select.table2 <- selecttabletodivide[[2]]
test.select.table2 <- selecttabletodivide[[3]]
selectdatatodivide <- DatasetDivide(dataset=select.data)
train.select.data2 <- selectdatatodivide[[1]]
valid.select.data2 <- selectdatatodivide[[2]]
test.select.data2 <- selectdatatodivide[[3]]
#20201230结果评价
####第一步 将SVM的概率结果读入
#设置mat文件存储路径
library(R.matlab)
aa <- 1
datapath <- paste("315dataset",aa,sep = "")
setwd(paste("C:/Users/1231/Desktop/dataprocessing/data/",datapath,sep = ""))
mat.file=("newdataset_decision.mat")
probability.data2=readMat(mat.file,fixNames = FALSE)
#prob.for.genes  存储时，对每个节点来说，第一位是为label1的概率，而后是为0的概率
prob.for.genes2=probability.data2$decision_test
setwd("C:/Users/1231/Desktop/dataprocessing/library")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
library(gpls)
library(plsgenomics)
library(keras)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("read_predict_arff.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_train_NegGOA.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("naive_downtop.R")#用于实现down top方式得出最终结果
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("pr_auc_calculate.R")
source("prauc_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detectprob.R")
source("violate_detectlabel.R")
source("data_process.R")
source("dataset_rebuild.R")
source("dataset_select.R")
source("factor_to_num.R")
source("new_pathrule.R")#用于实现基于父子节点修改概率的后期处理方法
source("BN_compute.R")#用于实现基于贝叶斯网络修改概率的后期处理方法
source("BN_compute2.R")#用于实现基于贝叶斯网络修改概率的后期处理方法,先验概率设置为0.5
source("nn_get_dataset.R")#用于神经网络算法中生成整合父节点标签的数据集
source("get_ancestor_dataset.R")#用于神经网络算法中生成整合祖先节点标签的数据集
####第二步 进行TPR规则处理
#用于检测结果是否符合TPR规则
#violate.detect.result=ViolateDetectprob(go.for.level, go.leaf.nodes,nodes.to.index,nodes.to.children,prob.for.genes)
#TPR 两步计算公式
# downtop.w.prob=DownTopParent(go.for.level.3,go.leaf.nodes.3,nodes.to.index,nodes.to.children,prob.for.genes,each.go.weight)
# topdown.w.prob=TopDownStep(go.for.level.3,go.leaf.nodes.3,nodes.to.index,nodes.to.children,downtop.w.prob)
downtop.prob2=DownTopStep(go.for.level2,go.leaf.nodes2,nodes.to.index2,nodes.to.children2,prob.for.genes2)
topdown.prob2=TopDownStep(go.for.level2,go.leaf.nodes2,nodes.to.index2,nodes.to.children2,downtop.prob2)
#topdown.prob=NaiveDownTop(go.for.level,go.leaf.nodes,nodes.to.index,nodes.to.parents,downtop.prob)
#violate.detect.down=ViolateDetectprob(go.for.level, go.leaf.nodes,nodes.to.index,nodes.to.children,downtop.prob)
#violate.detect.top=ViolateDetectprob(go.for.level, go.leaf.nodes,nodes.to.index,nodes.to.children,topdown.prob)
# valid.en=FALSE #用于对验证集进行结果评价
# if(valid.en==TRUE)
# {
#   predict.labels=matrix(0,nrow(valid.select.table),ncol(valid.select.table))
#   predict.scores=matrix(0,nrow(valid.select.table),ncol(valid.select.table))
#   rownames(predict.labels)=rownames(valid.select.table)
#   colnames(predict.labels)=colnames(valid.select.table)
#   rownames(predict.scores)=rownames(valid.select.table)
#   colnames(predict.scores)=colnames(valid.select.table)
#   for(i in 1:nrow(topdown.prob))
#   {
#     for(j in 1:length(except.root.labels.3))
#     {
#       predict.scores[i,j]=topdown.prob[i,(2*j-1)]
#       if(topdown.prob[i,(2*j-1)]>0.5)
#       {
#         predict.labels[i,except.root.labels.3[j]]=1
#       }
#     }
#   }
#
#   valid.label.index=nodes.to.index[colnames(valid.select.table)]
#   measure.result=MHevaluate(predict.labels,valid.select.table)
#   F.each.class=F.measure.single.over.classes(valid.select.table, predict.labels)
#   prauc_result=PRAUCCalculate(predict.scores,valid.select.table)
#
# }
####第三步 计算处理结果的评价指标
test.en=TRUE
if(test.en==TRUE)
{
predict.labels2=matrix(0,nrow(test.select.table2),ncol(test.select.table2))
predict.scores2=matrix(0,nrow(test.select.table2),ncol(test.select.table2))
rownames(predict.labels2)=rownames(test.select.table2)
colnames(predict.labels2)=colnames(test.select.table2)
rownames(predict.scores2)=rownames(test.select.table2)
colnames(predict.scores2)=colnames(test.select.table2)
for(i in 1:nrow(topdown.prob2))
{
for(j in 1:length(except.root.labels2))
{
predict.scores2[i,j]=topdown.prob2[i,(2*j-1)]
if(topdown.prob2[i,(2*j-1)]>0.5)
{
predict.labels2[i,except.root.labels2[j]]=1
}
}
}
test.label.index2=nodes.to.index2[colnames(test.select.table2)]
measure.result2=MHevaluate(predict.labels2,test.select.table2)
F.each.class2=F.measure.single.over.classes(test.select.table2, predict.labels2)
prauc_result2=PRAUCCalculate(predict.scores2,test.select.table2)
}
#使用newpathrule方法处理的结果
final.result2=NewPathrule(prob.for.genes2,except.root.labels2,go.for.level2,go.leaf.nodes2,test.select.table2)
final.predict.labels2=final.result2[[1]]
final.predict.scores2=final.result2[[2]]
aa2=Pr_Auc_Calculate(final.predict.scores2,test.select.table2,plot.en=TRUE)
prauc_result.final2=PRAUCCalculate(final.predict.scores2,test.select.table2)
measure.result.final2=MHevaluate(final.predict.labels2,test.select.table2)
#使用BN方法处理的结果
bn.result2=BNcompute(prob.for.genes2,except.root.labels2,go.for.level2,go.leaf.nodes2,test.select.table2)
bn.predict.labels2=bn.result2[[3]]
bn.predict.scores2=bn.result2[[4]]
prauc_result.bn=PRAUCCalculate(bn.predict.scores2,test.select.table2)
measure.result.bn=MHevaluate(bn.predict.labels2,test.select.table2)
#使用BN2方法处理的结果
bn2.result2=BNcompute2(prob.for.genes2,except.root.labels2,go.for.level2,go.leaf.nodes2,test.select.table2)
bn2.predict.labels2=bn2.result2[[1]]
bn2.predict.scores2=bn2.result2[[2]]
prauc_result.bn2=PRAUCCalculate(bn2.predict.scores2,test.select.table2)
measure.result.bn2=MHevaluate(bn2.predict.labels2,test.select.table2)
# if(test.en==TRUE)#此部分代码用于实现权值TPR算法
# {
#   predict.w.labels=matrix(0,nrow(test.select.table),ncol(test.select.table))
#   predict.w.scores=matrix(0,nrow(test.select.table),ncol(test.select.table))
#   rownames(predict.w.labels)=rownames(test.select.table)
#   colnames(predict.w.labels)=colnames(test.select.table)
#   rownames(predict.w.scores)=rownames(test.select.table)
#   colnames(predict.w.scores)=colnames(test.select.table)
#   for(i in 1:nrow(topdown.w.prob))
#   {
#     for(j in 1:length(except.root.labels.3))
#     {
#       predict.w.scores[i,j]=topdown.w.prob[i,(2*j-1)]
#       if(topdown.w.prob[i,(2*j-1)]>0.5)
#       {
#         predict.w.labels[i,except.root.labels.3[j]]=1
#       }
#     }
#   }
#
#   test.label.index.w=nodes.to.index[colnames(test.select.table)]
#   measure.result.w=MHevaluate(predict.w.labels,test.select.table)
#   F.each.class.w=F.measure.single.over.classes(test.select.table, predict.w.labels)
#   prauc_result.w=PRAUCCalculate(predict.w.scores,test.select.table)
#
# }
####第四步 用于将输出结果进行存储
data.path <- "C:/Users/1231/Desktop/dataprocessing/data"
result.output.en=TRUE
result.savepath=paste(data.path,"/315result",sep = "")
setwd(result.savepath)
today <-Sys.Date()
run.num=1
output.fname=paste("newdataset_result",aa,".txt",sep = "")
fname=paste("original",aa,".txt",sep = "")
if(result.output.en==TRUE)
{
write.table(today,file=output.fname,sep = " , ",eol="\n",quote=FALSE,row.names = FALSE,col.names = FALSE,append = FALSE)
write.table(measure.result2,file=output.fname,sep = " , ",eol="\n",quote=FALSE,row.names = FALSE,col.names = TRUE,append = TRUE)
#write.table(measure.result.w,file=output.fname,sep = " ,",eol="\n",quote=FALSE,row.names = FALSE,col.names = TRUE,append = TRUE)
write.table(prauc_result2,file=output.fname,sep = " , ",eol="\n",quote=FALSE,row.names = FALSE,col.names = TRUE,append = TRUE)
#write.table(prauc_result.w,file=output.fname,sep = " , ",eol="\n",quote=FALSE,row.names = FALSE,col.names = TRUE,append = TRUE)
write.table(measure.result2,file=fname,sep = ",",eol="\n",quote=FALSE,row.names = FALSE,col.names = FALSE,append = FALSE)
}
View(predict.labels2)
tochangelabels <- vector()
for (u in 1:nrow(predict.scores2)) {
for (v in 1:ncol(predict.scores2)) {
#   if(predict.labels2[u,v] == 0 && test.select.table2[u,v] == 1)
#   {
#     tochangelabels <-  c(tochangelabels,paste(u,v,sep = ",",collapse = " "))
#   }
if(FALSE %in%  is.na(nodes.to.descendants2[[v]] ))
{
for (q in 1:length(nodes.to.descendants2[[v]]))
{
if(predict.scores2[u,v] < predict.scores2[u,nodes.to.descendants2[[v]][q]])
{
tochangelabels <-  c(tochangelabels,paste(u,v,sep = ",",collapse = " "))
}
}
}
}
}
tochangelabels <- vector()
for (u in 1:nrow(predict.labels2)) {
for (v in 1:ncol(predict.labels2)) {
#   if(predict.labels2[u,v] == 0 && test.select.table2[u,v] == 1)
#   {
#     tochangelabels <-  c(tochangelabels,paste(u,v,sep = ",",collapse = " "))
#   }
if(FALSE %in%  is.na(nodes.to.descendants2[[v]] ))
{
for (q in 1:length(nodes.to.descendants2[[v]]))
{
if(predict.labels2[u,v] < predict.labels2[u,nodes.to.descendants2[[v]][q]])
{
tochangelabels <-  c(tochangelabels,paste(u,v,sep = ",",collapse = " "))
}
}
}
}
}
predict.labels2[50,5]
1 %in% predict.labels2[50,]
which(0 %in% predict.labels2)
which(0 %in% predict.labels2[50,])
grepl("0",predict.labels2[50,])
predict.labels2[50,6]
predict.labels2[50,nodes.to.descendants2[[6]]]
nodes.to.descendants2[[6]]
predict.labels2[50,248]
nodes.to.descendants2[[248]]
predict.labels2[50,nodes.to.descendants2[[248]]]
predict.labels2[50,300]
predict.labels2[50,nodes.to.descendants2[[300]]]
tochangelabels <- vector()
for (u in 1:nrow(predict.scores2)) {
for (v in 1:ncol(predict.scores2)) {
#   if(predict.labels2[u,v] == 0 && test.select.table2[u,v] == 1)
#   {
#     tochangelabels <-  c(tochangelabels,paste(u,v,sep = ",",collapse = " "))
#   }
if(FALSE %in%  is.na(nodes.to.descendants2[[v]] ))
{
for (q in 1:length(nodes.to.descendants2[[v]]))
{
if(predict.scores2[u,v] < predict.scores2[u,nodes.to.descendants2[[v]][q]])
{
tochangelabels <-  c(tochangelabels,paste(u,v,sep = ",",collapse = " "))
}
}
}
}
}
