#搜索在含某class的listexrootclassesPaths的内部位置
aa <- vector()
for (j in 1:length(eachnodeslevels[[index2[[i]][k]]])) {
#某个节点的paths数量
#cat(j,"\n")
bb <- vector()
if(sum(grepl(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])) != 0)
{
#bb是except.root.labels2[i]在具体某个节点的j个paths里面出现的位置
bb <- grep(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])
#在eachnodeslevels里找子节点父节点
children.nodes2[[parentclasses2]] <- c(children.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb+1])
parents.nodes2[[parentclasses2]] <- c(parents.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb-1])
aa <- c(aa,bb)
}
}
nextindex2[[k]] <- list(aa)
#children.index2[[i]]的数量是节点总共在路径中出现的次数，children.index[[i]]里有几个list对应着index2[[i]]里元素个数，这个节点总共出现几次
#index2[[i]]里是大路径的索引k，索引1对应children.index2[[i]]里的第一个list，list里的元素就是在这个大路径k下的多个小路径，这个class所在的位置，但NA是缺失的
children.index2[[except.root.labels2[i]]] <- c(children.index2[[except.root.labels2[i]]],nextindex2[[k]])
}
children.nodes2[[i]] <- unique(children.nodes2[[i]])
parents.nodes2[[i]] <- unique(parents.nodes2[[i]])
nodes.to.children2[[parentclasses2]] <- grep(paste(children.nodes2[[i]],collapse = "|"),except.root.labels2)
nodes.to.parents2[[parentclasses2]] <- grep(paste(parents.nodes2[[i]],collapse = "|"),except.root.labels2)
children.nodes2[[i]] <- na.omit(children.nodes2[[i]])
#查找叶子节点
if (length(nodes.to.children2[[except.root.labels2[i]]]) == 0)
{
go.leaf.nodes2 <- c(go.leaf.nodes2,names(nodes.to.children2[except.root.labels2[i]]))
}
nodes.to.ancestors2[[except.root.labels2[i]]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
ipos <- paste("^",i,"$",sep="")
nodes.to.ancestors2[[except.root.labels2[i]]] <- nodes.to.ancestors2[[except.root.labels2[i]]][-grep(ipos,nodes.to.ancestors2[[except.root.labels2[i]]])]
#建立nodes.to.descendants2
nodes.to.descendants2[[except.root.labels2[i]]] <- nodes.to.children2[[except.root.labels2[i]]]
if(length(nodes.to.children2[[except.root.labels2[i]]]) > 0)
{
for (m in 1:length(nodes.to.children2[[except.root.labels2[i]]])) {
nodes.to.descendants2[[except.root.labels2[i]]] <- c(nodes.to.descendants2[[except.root.labels2[i]]], nodes.to.children2[[except.root.labels2[nodes.to.children2[[except.root.labels2[i]]][m]]]])
}
}
nodes.to.descendants2[[except.root.labels2[i]]] <- unique(nodes.to.descendants2[[except.root.labels2[i]]])
}
which(except.root.labels2 %in% go.leaf.nodes2)
View(listexrootClassesPaths)
library(hcgene)
# select.nodes2 <- c(select.nodes2,"GO:0008150")
BP.univ.graph2 <- Build.universal.graph.ontology.down(ontology = "BP")
CC.univ.graph2 <- Build.universal.graph.ontology.down(ontology = "CC")
View(BP.univ.graph2)
View(CC.univ.graph2)
View(BP.univ.graph2)
View(CC.univ.graph2)
View(BP.univ.graph2)
BP.univ.graph2@nodes
View(CC.univ.graph2)
except.root.labels2[120]
grep("GO:0048869",BP.univ.graph2$nodes)
grep("GO:0048869",BP.univ.graph2@nodes)
grep("GO:0048869",cc.univ.graph2@nodes)
View(CC.univ.graph2)
grep("GO:0048869",cc.univ.graph2@nodes)
CC.univ.graph2@nodes
grep("GO:0048869",cc.univ.graph2@nodes)
grep("GO:0048869",CC.univ.graph2@nodes)
MF.univ.graph2 <- Build.universal.graph.ontology.down(ontology = "MF")
grep("GO:0048869",MF.univ.graph2@nodes)
grep("GO0048869",allClasses)
View(listAllClassesLevels)
listAllClassesLevels[[198]]
grep("GO:0032502",BP.univ.graph2@nodes)
grep("GO:0044767",BP.univ.graph2@nodes)
grep("GO:0044763",BP.univ.graph2@nodes)
grep("GO:0044699",BP.univ.graph2@nodes)
grep("GO:0009987",BP.univ.graph2@nodes)
grep("GO:0009987",CC.univ.graph2@nodes)
grep("GO:0009987",MF.univ.graph2@nodes)
##################################################################
# Script to format datasets GO to the binary form (class vector) #
# to be used by HMC-LMLP.										 #
# The level of a GO term is defined by the longest path between it and the root node.											 #
# The inputs files should be first formated.					 #
#																 #
# Ricardo Cerri - 17/04/2013									 #
##################################################################
#datasets <- c("cellcycle","church","derisi","eisen","gasch1","gasch2","pheno","spo","expr","seq")
#dirDatasets <- c("Cellcycle","Church","Derisi","Eisen","Gasch1","Gasch2","Pheno","Spo","Expr","Seq")
datasets <- c("traindata")
dirDatasets <- c("traindata")
#illegalClasses contains the root classes of each one of the Gene Ontology hierarchies
#As all instances are assigned to these classes, lets remove them
illegalClasses <- c("GO0003674","GO0005575","GO0008150")
pathToOriginalData <- "C:/Users/1231/Documents/share/我的坚果云/NeuraNETL2GO_download/NeuraNETL2GO_download/data/"
#Search for the direct parent(s) of class
getDirectParents <- function(class,classStructure){
parentPositions <- grep(paste("/",class,sep=""),classStructure)
parents <- vector()
if(length(parentPositions) > 0){
for(i in 1:length(parentPositions)){
parents <- c(parents,unlist(strsplit(classStructure[parentPositions[i]],"/"))[1])
}
}
return(parents)
}
#Get all possible paths from the root to a class，完成对每一类搜索从根节点到其的全部路径
getClassParentsLevel <- function(class,classStructure,path,pos){
#Search for the direct parent(s) of class
parents <- getDirectParents(class,classStructure)
#新的class放到前面
path <- paste(class,"/",path,sep="")
#迭代，直到class没有父类（自身是root）
if(length(parents) > 0){
for(i in 1:length(parents)){
getClassParentsLevel(parents[i],classStructure,path,pos)
}
}
#产生listAllClassesLevels dataset
else{
listAllClassesLevels[[pos]] <<- c(listAllClassesLevels[[pos]],path)
}
return()
}
#Separate the classes per level
getClassesPerLevel <- function(listAllClassesLevels){
levelClasses <- vector("numeric",length(listAllClassesLevels))
for(j in 1:length(levelClasses)){
numEdges <- vector()
allPaths <- listAllClassesLevels[[j]][2:length(listAllClassesLevels[[j]])]
for(k in 1:length(allPaths)){
numEdges <- c(numEdges,length(unlist(strsplit(allPaths[k],"/"))))
}
levelClasses[j] <- max(numEdges)
}
#cat(levelClasses,"\n")
#Number of levels
numLevels <- length(unique(levelClasses))
#List to store classes per level
namesClasses <- vector("list",numLevels)
for(i in 2:numLevels){
regExpClass <- paste("^",i,"$",sep="")
posClassesLevel <- grep(regExpClass,levelClasses)
for(j in 1:length(posClassesLevel)){
namesClasses[[i]] <- c(namesClasses[[i]],listAllClassesLevels[[posClassesLevel[j]]][1])
}
}
return(namesClasses)
}
#Create vector of classes separated per level
getNamesColumns <- function(classesPerLevel){
namesColumns <- vector()
for(i in 2:length(classesPerLevel)){
nameClass <- paste("class_",classesPerLevel[[i]],"_level",i-1,sep="")
namesColumns <- c(namesColumns,nameClass)
}
return(namesColumns)
}
#Main script loop
for(i in 1:length(datasets)){
#First read the class structure of the original data to determine class levels
originalData <- scan(paste(pathToOriginalData,dirDatasets[i],'/',"HieraGOData20.txt",sep=""), what="character", dec=".", sep="\n")
classStructure <- scan(paste(pathToOriginalData,dirDatasets[i],'/',"HieraGOData20.txt",sep=""), what="character", dec=".", sep="\n")
#classStructure <- originalData[grep("hierarchical",originalData)]
#classStructure <- unlist(strsplit(classStructure,"hierarchical"))[2]
classStructure <- gsub(" ","",classStructure)
classStructure <- unlist(strsplit(classStructure,","))
#Remove illegalClasses
for(j in 1:length(illegalClasses)){
classStructure <- gsub(illegalClasses[j],"root",classStructure)
classStructure <- classStructure[classStructure != "root/root"]
}
#Get number of classes
allClasses <- unlist(strsplit(classStructure,"/"))
allClasses <- unique(allClasses)
#List of classes. Each position of the list corresponts to a class.
#The list contains all possible paths from the root to a given class
listAllClassesLevels <<- vector("list",length(allClasses))
for(j in 1:length(allClasses)){
listAllClassesLevels[[j]] <- c(listAllClassesLevels[[j]],allClasses[j])
}
#debug(getClassParentsLevel)
#debug(getDirectParents)
#Get all possible paths from the root to a class
#For each class, store the set of all classes belonging to the path
#between the class and the root node
allClassesPaths <- vector("list",length(allClasses))
for(j in 1:length(allClasses)){
path <- ""
getClassParentsLevel(allClasses[j],classStructure,path,j)
#深度优先遍历
parentClasses <- listAllClassesLevels[[j]][2:length(listAllClassesLevels[[j]])]
parentClasses <- unlist(strsplit(parentClasses,"/"))
parentClasses <- unique(parentClasses)
parentClasses <- parentClasses[parentClasses != "root"]
allClassesPaths[[j]] <- parentClasses
}
#Now lets determine the level of each class
classesPerLevel <- getClassesPerLevel(listAllClassesLevels)
#Create vector of classes separated per level
namesColumns <- getNamesColumns(classesPerLevel)
#Index the positions of the classes (allClassesPaths) according to the levels
indexClassesLevels <- vector("list",length(allClasses))
indexAllClassesPathsLevels <- vector("list",length(allClasses))
for(j in 1:length(allClasses)){
#把allclassespaths里面的标签GO(chr)转换成了index(int)，
indexClassesLevels[[j]] <- grep(paste(allClassesPaths[[j]],collapse="|"),namesColumns)
indexHead <- grep(listAllClassesLevels[[j]][1],namesColumns)
indexAllClassesPathsLevels[[j]] <- c(indexAllClassesPathsLevels[[j]],indexHead)
for(k in 2:length(listAllClassesLevels[[j]])){
vetClasses <- unlist(strsplit(listAllClassesLevels[[j]][k],"/"))
vetClasses <- vetClasses[vetClasses != "root"]
indexesPerLevel <- grep(paste(vetClasses,collapse="|"),namesColumns)
indexAllClassesPathsLevels[[j]] <- c(indexAllClassesPathsLevels[[j]],paste(indexesPerLevel,collapse="/"))
}
}
#Read the training, validation and test data
datasetTrain <- read.csv(paste(pathToOriginalData,datasets[i],'/',"traingdata(train).csv",sep=""),header=TRUE,dec='.')
datasetValid <- read.csv(paste(pathToOriginalData,datasets[i],'/',"traingdata(validate).csv",sep=""),header=TRUE,dec='.')
#Index of last element of training data
indexLastTraining <- nrow(datasetTrain)
#Concatenate train and valid data to generate the files with the same indexes
dataset <- rbind(datasetTrain,datasetValid)
#
# #Index of last element of valid data
# indexLastValid <- nrow(dataset)
#
# #Concatenate train, valid and test data to generate the files with the same indexes
# dataset <- rbind(dataset,datasetTest)
#Remove useless
#Will treat these datasets different, as they have only categorical attributes
#if(datasets[i] == "pheno" || datasets[i] == "hom" || datasets[i] == "struct"){
#	columns <- vector()
#   for(col in 1:ncol(dataset)){
#        if(length(union(dataset[,col],dataset[,col])) == 1){
#            columns <- c(columns,col)
#        }
#    }
#    if(length(columns) > 0){
#        dataset <- dataset[,-columns]
#    }
#    dataset[dataset==0] = -1
#}
#Get all classes for all examples
nrowDataset <- nrow(dataset)
ncolDataset <- ncol(dataset)
#Create dataframe of boolean classes
#matrix行是4085个数据集，列是已分好level的classes,把matrix转成dataframe，colnames换成已分好level的classes
dataFrameClasses <- as.data.frame(matrix(data=0,nrow=nrowDataset,ncol=length(namesColumns)))
colnames(dataFrameClasses) <- namesColumns
#Set to 1 the positions of the classes of the instances
#对dataset的最后一列（所属一串GO信息）进行拆分
for(j in 1:nrowDataset){
classes <- as.character(dataset[j,ncolDataset])
if(length(grep("@",classes) > 0)){
classes <- unlist(strsplit(classes,"@"))
}
#remove the illegal classes
posIllegal <- grep(paste(illegalClasses,collapse="|"),classes)
if(length(posIllegal) > 0){
classes <- classes[-posIllegal]
}
#找到数据集的GO标签在allclasses中的位置，在dataframeclasses中对应位置将全部父类标记为1（通过indexClassesLevels的数据）
#There are instances that are assigned only to the illegal classes.
#In this case they will not be classified in any class
if(length(classes) > 0){
#Set to 1 the class position and the position of all superclasses of the class
#allPositions是样本所属类的位置，indexClassesLevels[allPositions]是类的所有父类的索引位置。
allPositions <- grep(paste(classes,collapse="|"),allClasses)
#zhangjp
#zhangjp
dataFrameClasses[j,unique(unlist(indexClassesLevels[allPositions]))] <- 1
}
cat(j,"\n")
}
dataset2 <- dataset
#Concatenate data with boolen classes
dataset <- dataset[,-ncolDataset]
}
datasetFinal <- cbind(dataset,dataFrameClasses)
write.csv(datasetFinal,"datasetFinal.csv",row.names = FALSE)
#
#Separate train, valid and test data
#  datasetFinalTrain <- datasetFinal[1:indexLastTraining,]
#  colnames(datasetFinalTrain) <- colnames(datasetFinal)
# #
#  datasetFinalValid <- datasetFinal[(indexLastTraining+1):indexLastValid,]
#  colnames(datasetFinalValid) <- colnames(datasetFinal)
# #
#  datasetFinalTest <- datasetFinal[(indexLastValid+1):nrow(datasetFinal),]
#  colnames(datasetFinalTest) <- colnames(datasetFinal)
#
# #Write the data
# write.csv(datasetFinalTrain,paste(datasets[i],".GO.trainRI.bin.csv",sep=""),row.names=FALSE)
# write.csv(datasetFinalValid,paste(datasets[i],".GO.validRI.bin.csv",sep=""),row.names=FALSE)
# write.csv(datasetFinalTest,paste(datasets[i],".GO.testRI.bin.csv",sep=""),row.names=FALSE)
# 	#Write information about classes,形成txt文件
# 	fileDAGrelationships <- paste(datasets[i],".GO.structure.txt",sep="")
#     arq <- file(fileDAGrelationships,open='w')
#     sink(arq)
#     cat(originalData[grep("hierarchical",originalData)])
#     sink()
#     close(arq)
#
# 	fileAllClassesLevels <- paste(datasets[i],".AllClassesLevels.txt",sep="")
#     arq <- file(fileAllClassesLevels,open='w')
#     sink(arq)
# 	for(j in 2:length(listAllClassesLevels)){
# 		paths <- gsub("root/","",listAllClassesLevels[[j]])
# 		paths <- gsub("/$","",paths)
# 		paths <- paste(paths,collapse="@")
# 		cat(paths,"\n")
# 	}
#     sink()
#     close(arq)
#
# 	fileIndexAllClassesPathsLevels <- paste(datasets[i],".indexAllClassesPathsLevels.txt",sep="")
#     arq <- file(fileIndexAllClassesPathsLevels,open='w')
#     sink(arq)
# 	for(j in 2:length(indexAllClassesPathsLevels)){
# 		indexes <- paste(indexAllClassesPathsLevels[[j]],collapse="@")
# 		cat(indexes,"\n")
# 	}
#     sink()
#     close(arq)
# }
#20201216
#建立except.root.tabel2
except.root.labels2 <-  allClasses[allClasses != "root"]
except.root.tabel2 <- as.data.frame(matrix(data=0,nrow=length(dataset2[,1]),ncol=length(except.root.labels2)))
colnames(except.root.tabel2) <- except.root.labels2
rownames(except.root.tabel2) <- dataset2[,1]
nrowDataset2 <- nrow(dataset2)
ncolDataset2 <- ncol(dataset2)
#indexClassesLevels里去掉根节点的路径
exrootindexClassesLevels <- vector("list",length(except.root.labels2))
exrootClassesPaths <- allClassesPaths[-grep("root",allClasses)]
for (i in 1:length(except.root.labels2)) {
exrootindexClassesLevels[[i]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
}
for(j in 1:nrowDataset2){
classes <- as.character(dataset2[j,ncolDataset2])
if(length(grep("@",classes) > 0)){
classes <- unlist(strsplit(classes,"@"))
}
#remove the illegal classes
posIllegal <- grep(paste(illegalClasses,collapse="|"),classes)
if(length(posIllegal) > 0){
classes <- classes[-posIllegal]
}
#找到数据集的GO标签在allclasses中的位置，在dataframeclasses中对应位置将全部父类标记为1（通过indexClassesLevels的数据）
#There are instances that are assigned only to the illegal classes.
#In this case they will not be classified in any class
if(length(classes) > 0){
#Set to 1 the class position and the position of all superclasses of the class
#allPositions是样本所属类的位置，indexClassesLevels[allPositions]是类的所有父类的索引位置。
allPositions2 <- grep(paste(classes,collapse="|"),except.root.labels2)
#zhangjp
#zhangjp
except.root.tabel2[j,unique(unlist(exrootindexClassesLevels[allPositions2]))] <- 1
}
}
invalidindex <- vector()
for (k in 1:ncol(except.root.tabel2)) {
if (sum(except.root.tabel2[,k]) <  100)
{
invalidindex <- c(invalidindex,k)
}
}
# CC.nodes2 <- c("GO0044710", "GO0044763", "GO0044699", "GO0044707", "GO0044767", "GO0007067", "GO0044700", "GO0044702")
# CC.nodes.pos2 <- which(except.root.labels2 %in% CC.nodes2)
# invalidindex <- c(invalidindex,CC.nodes.pos2)
# invalidlabels <- except.root.labels2[invalidindex]
except.root.labels2 <- except.root.labels2[-invalidindex]
except.root.tabel2 <- except.root.tabel2[,-invalidindex]
exrootClassesPaths <- exrootClassesPaths[-invalidindex]
#提取classesPerLevel，go.for.level2
listexrootClassesLevels <- listAllClassesLevels[-grep("root",allClasses)]
listexrootClassesLevels <- listexrootClassesLevels[-invalidindex]
#20201216建立新数据集的GO变量
#去掉listexrootClassesLevels的第一个元素
listexrootClassesPaths <- vector("list")
#构造eachnodeslevels，一去掉list里的第一个元素（节点自身），二把路径（一长串string“a/b/c/d”拆成有顺序的多个元素”a””b””c””d”
eachnodeslevels <- vector("list",length = length(listexrootClassesPaths))
for (t in 1:length(listexrootClassesLevels)) {
listexrootClassesPaths[[t]] <- listexrootClassesLevels[[t]][-1]
eachnodeslevels[[t]] <- strsplit(listexrootClassesPaths[[t]],"/")
}
eachnodeslevels2 <- eachnodeslevels
levelClasses <- vector("numeric",length(listexrootClassesLevels))
for(j in 1:length(levelClasses)){
numEdges <- vector()
allPaths <- listexrootClassesLevels[[j]][2:length(listexrootClassesLevels[[j]])]
for(k in 1:length(allPaths)){
numEdges <- c(numEdges,length(unlist(strsplit(allPaths[k],"/"))))
}
levelClasses[j] <- max(numEdges)
}
#cat(levelClasses,"\n")
#Number of levels
numLevels <- max(unique(levelClasses))
namesClasses <- vector("list",numLevels)
for(i in 2:numLevels){
regExpClass <- paste("^",i,"$",sep="")
posClassesLevel <- grep(regExpClass,levelClasses)
for(j in 1:length(posClassesLevel)){
namesClasses[[i]] <- c(namesClasses[[i]],listexrootClassesLevels[[posClassesLevel[j]]][1])
}
}
go.for.level2 <- namesClasses
go.for.level2[[1]] <- NULL
#建立索引nodes.to.index2
nodes.to.index2 <- as.list(1:length(except.root.labels2))
names(nodes.to.index2) <- except.root.labels2
#搜索子节点,建立nodes.to.children,nodes.to.parents,
children.nodes2 <- vector("list")
parents.nodes2 <- vector("list")
index2 <- vector("list")
children.index2 <- vector("list")
nextindex2 <- vector("list")
#names(index) <- except.root.labels2
nodes.to.children2 <- vector("list")
nodes.to.parents2 <- vector("list")
nodes.to.ancestors2 <- vector("list")
nodes.to.descendants2 <- vector("list",length = length(except.root.labels2))
#names(index) <- except.root.labels2
go.leaf.nodes2 <- vector()
for (i in 1:length(except.root.labels2))
{
cat(i,"\n")
#搜索class[i]在全部listexrootclassesPaths的位置索引
parentclasses2 <- except.root.labels2[i]
#index2是except.root.labels2[i]在listexrootClassesPaths出现的位置
index2[[parentclasses2]] <- grep(parentclasses2,listexrootClassesPaths)
#class[i]不只出现一次，index2[i]里有多个元素
for (k in 1:length(index2[[i]])) {
#搜索在含某class的listexrootclassesPaths的内部位置
aa <- vector()
for (j in 1:length(eachnodeslevels[[index2[[i]][k]]])) {
#某个节点的paths数量
#cat(j,"\n")
bb <- vector()
if(sum(grepl(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])) != 0)
{
#bb是except.root.labels2[i]在具体某个节点的j个paths里面出现的位置
bb <- grep(parentclasses2,eachnodeslevels[[index2[[i]][k]]][[j]])
#在eachnodeslevels里找子节点父节点
children.nodes2[[parentclasses2]] <- c(children.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb+1])
parents.nodes2[[parentclasses2]] <- c(parents.nodes2[[parentclasses2]],eachnodeslevels[[index2[[i]][k]]][[j]][bb-1])
aa <- c(aa,bb)
}
}
nextindex2[[k]] <- list(aa)
#children.index2[[i]]的数量是节点总共在路径中出现的次数，children.index[[i]]里有几个list对应着index2[[i]]里元素个数，这个节点总共出现几次
#index2[[i]]里是大路径的索引k，索引1对应children.index2[[i]]里的第一个list，list里的元素就是在这个大路径k下的多个小路径，这个class所在的位置，但NA是缺失的
children.index2[[except.root.labels2[i]]] <- c(children.index2[[except.root.labels2[i]]],nextindex2[[k]])
}
children.nodes2[[i]] <- unique(children.nodes2[[i]])
parents.nodes2[[i]] <- unique(parents.nodes2[[i]])
nodes.to.children2[[parentclasses2]] <- grep(paste(children.nodes2[[i]],collapse = "|"),except.root.labels2)
nodes.to.parents2[[parentclasses2]] <- grep(paste(parents.nodes2[[i]],collapse = "|"),except.root.labels2)
children.nodes2[[i]] <- na.omit(children.nodes2[[i]])
#查找叶子节点
if (length(nodes.to.children2[[except.root.labels2[i]]]) == 0)
{
go.leaf.nodes2 <- c(go.leaf.nodes2,names(nodes.to.children2[except.root.labels2[i]]))
}
nodes.to.ancestors2[[except.root.labels2[i]]] <- grep(paste(exrootClassesPaths[[i]],collapse = "|"),except.root.labels2)
ipos <- paste("^",i,"$",sep="")
nodes.to.ancestors2[[except.root.labels2[i]]] <- nodes.to.ancestors2[[except.root.labels2[i]]][-grep(ipos,nodes.to.ancestors2[[except.root.labels2[i]]])]
#建立nodes.to.descendants2
# nodes.to.descendants2[[except.root.labels2[i]]] <- nodes.to.children2[[except.root.labels2[i]]]
#
# if(length(nodes.to.children2[[except.root.labels2[i]]]) > 0)
# {
# for (m in 1:length(nodes.to.children2[[except.root.labels2[i]]])) {
#   nodes.to.descendants2[[except.root.labels2[i]]] <- c(nodes.to.descendants2[[except.root.labels2[i]]], nodes.to.children2[[except.root.labels2[nodes.to.children2[[except.root.labels2[i]]][m]]]])
# }
# }
# nodes.to.descendants2[[except.root.labels2[i]]] <- unique(nodes.to.descendants2[[except.root.labels2[i]]])
}
#20210131改，遍历子孙节点
names(nodes.to.descendants2) <- except.root.labels2
for (m in 1:length(except.root.labels2)) {
for (n in 1:length(except.root.labels2)) {
if ( m %in% nodes.to.ancestors2[[except.root.labels2[n]]] == TRUE)
nodes.to.descendants2[[except.root.labels2[m]]] <- c(nodes.to.descendants2[[except.root.labels2[m]]],n)
}
if (length(nodes.to.descendants2[[except.root.labels2[m]]]) == 0)
nodes.to.descendants2[[except.root.labels2[m]]] <- integer(0)
}
#去掉不属于BP功能的CC.nodes的子孙节点，以及召回率不好的节点的子孙节点20210201
CC.nodes2 <- c("GO0044710", "GO0044763", "GO0044699", "GO0044707", "GO0044767", "GO0007067", "GO0044700", "GO0044702")
CC.nodes.pos2 <- which(except.root.labels2 %in% CC.nodes2)
CC.nodes.pos2 <- c(CC.nodes.pos2,85,87,133,135,136,140,163,189,221,224,225,236,244,246)
CC.nodes2 <- except.root.labels2[CC.nodes.pos2]
removeindex <- CC.nodes.pos2
for (i in 1:length(CC.nodes.pos2)) {
removeindex <- unique(c(removeindex,nodes.to.descendants2[[CC.nodes2[i]]]))
}
removelabels <- except.root.labels2[removeindex]
except.root.labels2 <- except.root.labels2[-removeindex]
except.root.tabel2 <- except.root.tabel2[,-removeindex]
exrootClassesPaths <- exrootClassesPaths[-removeindex]
listexrootClassesPaths <- listexrootClassesPaths[-removeindex]
listexrootClassesLevels <- listexrootClassesLevels[-removeindex]
setwd("C:/Users/1231/Desktop/dataprocessing")
source("nodescreation.R")
setwd("C:/Users/1231/Desktop/dataprocessing")
source("traindataprocessing.R")
source("validatedataprocessing.R")
source("testdataprocessing.R")
source('C:/Users/1231/Desktop/dataprocessing/nodestraindatasetcreation.R', echo=TRUE)
